#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 333)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    44,    70,   228,   145,    91,    91,    65,   103,   229,     7,
   217,   137,     8,   219,   126,   220,   221,   138,    44,    68,
    69,   222,    85,    84,   139,   152,   130,   131,   140,    67,
    67,   141,   149,    18,    67,    71,    44,    67,    67,   222,
   185,    47,    48,   144,    32,    45,    36,    38,    39,    40,
    41,    18,    49,   128,    52,    47,    48,   127,   165,    47,
    48,  -125,    32,    45,    36,    38,    39,    40,    41,    18,
    49,    44,    52,   166,    28,   167,   168,    47,    48,     8,
    32,    45,    36,    38,    39,    40,    41,    96,    49,    44,
    52,   169,    28,  -125,  -125,  -125,   170,   171,    14,   122,
    97,   173,    99,   100,    18,   101,   102,   208,   209,   174,
    67,    60,    47,    48,    60,    32,    45,    36,    38,    39,
    40,    41,    18,    49,    44,    52,   180,    28,   181,   114,
    47,    48,     8,    32,    45,    36,    38,    39,    40,    41,
    96,    49,    44,    52,   185,   222,    67,   197,   200,    60,
   106,   203,   204,    97,    86,    99,   100,    18,   101,   102,
    44,   211,    18,   222,   216,    47,    48,    83,    32,    45,
    36,    38,    39,    40,    41,    18,    49,   114,    52,    82,
    67,    81,   224,    47,    48,  -144,    32,    45,    36,    38,
    39,    40,    41,    18,    49,    44,    52,    80,   145,    79,
    78,    47,    48,    77,    32,    45,    36,    38,    39,    40,
    41,    76,    49,    44,    52,    75,    28,     8,   -81,    64,
   152,    63,   239,   240,   185,   241,   200,   149,    18,    60,
   224,    44,    54,    53,    28,   245,    47,    48,    12,    32,
    45,    36,    38,    39,    40,    41,    18,    49,   247,    52,
   185,    67,    18,    44,    47,    48,    28,    32,    45,    36,
    38,    39,    40,    41,    18,    49,   252,    52,    11,   254,
   255,    44,    47,    48,    28,    32,    45,    36,    38,    39,
    40,    41,   256,    49,     9,    52,    18,    95,   135,    44,
    60,   nil,    28,   nil,    47,    48,   nil,    32,    45,    36,
    38,    39,    40,    41,    18,    49,   nil,    52,   nil,   nil,
   nil,    44,    47,    48,    28,    32,    45,    36,    38,    39,
    40,    41,    18,    49,   nil,    52,   nil,   nil,   nil,   nil,
    47,    48,   nil,    32,    45,    36,    38,    39,    40,    41,
   nil,    49,    44,    52,    18,   145,   nil,   nil,   nil,   nil,
     8,   nil,    47,    48,   nil,    32,    45,    36,    38,    39,
    40,    41,   nil,    49,   nil,    52,    44,   152,   nil,    28,
   nil,   nil,   nil,   nil,   149,    18,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    47,    48,   nil,    32,    45,    36,    38,
    39,    40,    41,   nil,    49,    44,    52,   nil,    28,    18,
   nil,   nil,   nil,   nil,   116,   nil,   nil,    47,    48,   nil,
    32,    45,    36,    38,    39,    40,    41,   nil,    49,    44,
    52,   nil,    28,   nil,   nil,   nil,   nil,   nil,    18,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,    32,
    45,    36,    38,    39,    40,    41,   nil,    49,    44,    52,
   nil,    28,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    47,    48,   nil,    32,    45,    36,    38,    39,    40,    41,
   nil,    49,    44,    52,   nil,    28,   nil,   nil,   nil,   nil,
   nil,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,
    48,   nil,    32,    45,    36,    38,    39,    40,    41,   nil,
    49,    44,    52,   nil,    28,    18,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    47,    48,   nil,    32,    45,    36,    38,
    39,    40,    41,   nil,    49,    44,    52,   nil,    28,   nil,
   nil,   nil,   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    47,    48,   nil,    32,    45,    36,    38,    39,
    40,    41,   nil,    49,   nil,    52,    44,   nil,    18,   145,
   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,    32,
    45,    36,    38,    39,    40,    41,   nil,    49,   nil,    52,
    44,   152,   nil,   222,   nil,   nil,   nil,   nil,   149,    18,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,
    32,    45,    36,    38,    39,    40,    41,   nil,    49,    44,
    52,   nil,    28,    18,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    47,    48,   nil,    32,    45,    36,    38,    39,    40,
    41,    96,    49,    44,    52,    94,    28,   nil,   nil,    95,
   nil,   nil,    18,   nil,    97,   nil,    99,   100,   nil,   101,
   102,   nil,   nil,    32,    45,    36,    38,    39,    40,    41,
   nil,    49,    44,    52,   nil,   222,    18,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    47,    48,   nil,    32,    45,    36,
    38,    39,    40,    41,   nil,    49,    44,    52,   nil,   222,
   nil,   nil,   nil,   nil,   nil,    18,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    47,    48,   nil,    32,    45,    36,    38,
    39,    40,    41,   nil,    49,    44,    52,   nil,   222,    18,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,
    32,    45,    36,    38,    39,    40,    41,   nil,    49,    44,
    52,   nil,   222,   nil,   nil,   nil,   nil,   nil,    18,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,    32,
    45,    36,    38,    39,    40,    41,   nil,    49,    44,    52,
   nil,   222,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    47,    48,   nil,    32,    45,    36,    38,    39,    40,    41,
   nil,    49,    44,    52,   nil,   222,   nil,   nil,   nil,   nil,
   nil,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,
    48,   nil,    32,    45,    36,    38,    39,    40,    41,   nil,
    49,    44,    52,   nil,   222,    18,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    47,    48,   nil,    32,    45,    36,    38,
    39,    40,    41,   nil,    49,   nil,    52,    44,   nil,   nil,
   145,   nil,   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    47,    48,   nil,    32,    45,    36,    38,    39,
    40,    41,   152,    49,   nil,    52,   nil,   nil,    44,   149,
    18,   145,   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,
   nil,    32,    45,    36,    38,    39,    40,    41,   nil,    49,
   nil,    52,    44,   152,   nil,    28,   nil,   nil,   nil,   nil,
   149,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,
    48,   nil,    32,    45,    36,    38,    39,    40,    41,   nil,
    49,    44,    52,   nil,   145,    18,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    47,    48,   nil,    32,    45,    36,    38,
    39,    40,    41,   nil,    49,   nil,    52,   nil,   nil,   nil,
   nil,   nil,   nil,   149,    18,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    47,    48,   nil,    32,    45,    36,    38,    39,
    40,    41,   nil,    49,   nil,    52,   186,   187,   nil,   188,
   189,   190,   nil,   nil,   nil,   nil,   191,   192,   193,   194,
   195,   196 ]

racc_action_check = [
   106,    22,   190,   106,    54,   128,    17,    56,   190,     0,
   183,    97,     0,   186,    83,   186,   186,    98,   252,    21,
    21,   252,    49,    49,   100,   106,    89,    89,   101,    17,
    56,   102,   106,   106,   103,    22,   245,    54,   128,   245,
   183,   106,   106,   105,   106,   106,   106,   106,   106,   106,
   106,   252,   106,    87,   106,    83,    83,    84,   116,   252,
   252,    20,   252,   252,   252,   252,   252,   252,   252,   245,
   252,   224,   252,   117,   224,   118,   119,   245,   245,   224,
   245,   245,   245,   245,   245,   245,   245,   178,   245,     8,
   245,   120,     8,    20,    20,    20,   121,   125,     8,    81,
   178,   133,   178,   178,   224,   178,   178,   178,   178,   134,
    75,   137,   224,   224,   138,   224,   224,   224,   224,   224,
   224,   224,     8,   224,   222,   224,   143,   222,   144,    74,
     8,     8,   222,     8,     8,     8,     8,     8,     8,     8,
   107,     8,   221,     8,   146,   221,    65,   149,   150,    63,
    62,   175,   176,   107,    52,   107,   107,   222,   107,   107,
   219,   179,   181,   219,   182,   222,   222,    46,   222,   222,
   222,   222,   222,   222,   222,   221,   222,   184,   222,    45,
   256,    44,   188,   221,   221,    42,   221,   221,   221,   221,
   221,   221,   221,   219,   221,   208,   221,    41,   208,    40,
    39,   219,   219,    38,   219,   219,   219,   219,   219,   219,
   219,    36,   219,   204,   219,    33,   204,   197,    18,    16,
   208,    13,   209,   211,   212,   213,   218,   208,   208,    12,
   220,    64,    11,     9,    64,   223,   208,   208,     7,   208,
   208,   208,   208,   208,   208,   208,   204,   208,   228,   208,
   238,   239,   241,    68,   204,   204,    68,   204,   204,   204,
   204,   204,   204,   204,    64,   204,   242,   204,     5,   246,
   248,    69,    64,    64,    69,    64,    64,    64,    64,    64,
    64,    64,   249,    64,     1,    64,    68,    93,    95,    70,
    96,   nil,    70,   nil,    68,    68,   nil,    68,    68,    68,
    68,    68,    68,    68,    69,    68,   nil,    68,   nil,   nil,
   nil,    71,    69,    69,    71,    69,    69,    69,    69,    69,
    69,    69,    70,    69,   nil,    69,   nil,   nil,   nil,   nil,
    70,    70,   nil,    70,    70,    70,    70,    70,    70,    70,
   nil,    70,   145,    70,    71,   145,   nil,   nil,   nil,   nil,
   145,   nil,    71,    71,   nil,    71,    71,    71,    71,    71,
    71,    71,   nil,    71,   nil,    71,   135,   145,   nil,   135,
   nil,   nil,   nil,   nil,   145,   145,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   145,   145,   nil,   145,   145,   145,   145,
   145,   145,   145,   nil,   145,    76,   145,   nil,    76,   135,
   nil,   nil,   nil,   nil,    76,   nil,   nil,   135,   135,   nil,
   135,   135,   135,   135,   135,   135,   135,   nil,   135,    77,
   135,   nil,    77,   nil,   nil,   nil,   nil,   nil,    76,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    76,    76,   nil,    76,
    76,    76,    76,    76,    76,    76,   nil,    76,    78,    76,
   nil,    78,    77,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    77,    77,   nil,    77,    77,    77,    77,    77,    77,    77,
   nil,    77,    79,    77,   nil,    79,   nil,   nil,   nil,   nil,
   nil,    78,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    78,
    78,   nil,    78,    78,    78,    78,    78,    78,    78,   nil,
    78,    80,    78,   nil,    80,    79,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    79,    79,   nil,    79,    79,    79,    79,
    79,    79,    79,   nil,    79,    94,    79,   nil,    94,   nil,
   nil,   nil,   nil,   nil,    80,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    80,    80,   nil,    80,    80,    80,    80,    80,
    80,    80,   nil,    80,   nil,    80,   200,   nil,    94,   200,
   nil,   nil,   nil,   nil,   nil,   nil,    94,    94,   nil,    94,
    94,    94,    94,    94,    94,    94,   nil,    94,   nil,    94,
   196,   200,   nil,   196,   nil,   nil,   nil,   nil,   200,   200,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   200,   200,   nil,
   200,   200,   200,   200,   200,   200,   200,   nil,   200,    23,
   200,   nil,    23,   196,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   196,   196,   nil,   196,   196,   196,   196,   196,   196,
   196,    55,   196,    28,   196,    55,    28,   nil,   nil,    55,
   nil,   nil,    23,   nil,    55,   nil,    55,    55,   nil,    55,
    55,   nil,   nil,    23,    23,    23,    23,    23,    23,    23,
   nil,    23,   195,    23,   nil,   195,    28,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    28,    28,   nil,    28,    28,    28,
    28,    28,    28,    28,   nil,    28,   194,    28,   nil,   194,
   nil,   nil,   nil,   nil,   nil,   195,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   195,   195,   nil,   195,   195,   195,   195,
   195,   195,   195,   nil,   195,   193,   195,   nil,   193,   194,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   194,   194,   nil,
   194,   194,   194,   194,   194,   194,   194,   nil,   194,   192,
   194,   nil,   192,   nil,   nil,   nil,   nil,   nil,   193,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   193,   193,   nil,   193,
   193,   193,   193,   193,   193,   193,   nil,   193,   191,   193,
   nil,   191,   192,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   192,   192,   nil,   192,   192,   192,   192,   192,   192,   192,
   nil,   192,   189,   192,   nil,   189,   nil,   nil,   nil,   nil,
   nil,   191,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   191,
   191,   nil,   191,   191,   191,   191,   191,   191,   191,   nil,
   191,   187,   191,   nil,   187,   189,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   189,   189,   nil,   189,   189,   189,   189,
   189,   189,   189,   nil,   189,   nil,   189,   185,   nil,   nil,
   185,   nil,   nil,   nil,   187,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   187,   187,   nil,   187,   187,   187,   187,   187,
   187,   187,   185,   187,   nil,   187,   nil,   nil,   180,   185,
   185,   180,   nil,   nil,   nil,   nil,   nil,   nil,   185,   185,
   nil,   185,   185,   185,   185,   185,   185,   185,   nil,   185,
   nil,   185,   174,   180,   nil,   174,   nil,   nil,   nil,   nil,
   180,   180,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   180,
   180,   nil,   180,   180,   180,   180,   180,   180,   180,   nil,
   180,   152,   180,   nil,   152,   174,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   174,   174,   nil,   174,   174,   174,   174,
   174,   174,   174,   nil,   174,   nil,   174,   nil,   nil,   nil,
   nil,   nil,   nil,   152,   152,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   152,   152,   nil,   152,   152,   152,   152,   152,
   152,   152,   nil,   152,   nil,   152,   148,   148,   nil,   148,
   148,   148,   nil,   nil,   nil,   nil,   148,   148,   148,   148,
   148,   148 ]

racc_action_pointer = [
    -1,   284,   nil,   nil,   nil,   266,   nil,   227,    84,   233,
   nil,   229,   191,   205,   nil,   nil,   215,    -9,   168,   nil,
    47,   -27,   -13,   604,   nil,   nil,   nil,   nil,   628,   nil,
   nil,   nil,   nil,   165,   nil,   nil,   203,   nil,   195,   192,
   191,   189,   129,   nil,   131,   174,   111,   nil,   nil,   -35,
   nil,   nil,    94,   nil,    -1,   627,    -8,   nil,   nil,   nil,
   nil,   nil,   124,   111,   226,   108,   nil,   nil,   248,   266,
   284,   306,   nil,   nil,   120,    72,   390,   414,   443,   467,
   496,    94,   nil,     9,     0,   nil,   nil,    49,   nil,    20,
   nil,   nil,   nil,   275,   520,   280,   252,    -7,    -1,   nil,
     3,     7,    10,    -4,   nil,    16,    -5,   136,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    49,    64,    66,    67,
    82,    87,   nil,   nil,   nil,    92,   nil,   nil,     0,   nil,
   nil,   nil,   nil,    92,   105,   361,   nil,    73,    76,   nil,
   nil,   nil,   nil,    98,   125,   337,   105,   nil,   956,   139,
   116,   nil,   926,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   897,   142,   148,   nil,    83,   132,
   873,   124,   155,     1,   168,   842,   -18,   816,   174,   787,
   -28,   763,   734,   710,   681,   657,   575,   204,   nil,   nil,
   551,   nil,   nil,   nil,   208,   nil,   nil,   nil,   190,   214,
   nil,   218,   185,   221,   nil,   nil,   nil,   nil,   194,   155,
   222,   137,   119,   203,    66,   nil,   nil,   nil,   212,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   211,   213,
   nil,   214,   234,   nil,   nil,    31,   260,   nil,   261,   278,
   nil,   nil,    13,   nil,   nil,   nil,   142,   nil,   nil ]

racc_action_default = [
  -156,  -156,    -1,    -2,    -3,    -5,   -16,  -156,  -156,  -156,
    -4,  -156,  -156,   -24,   -25,   -26,   -28,   -31,  -150,  -108,
  -109,  -112,  -115,  -156,  -117,  -118,  -119,  -120,  -156,  -122,
  -123,  -124,  -126,  -156,  -128,  -129,  -156,  -131,  -156,  -156,
  -156,  -156,  -137,  -138,  -142,  -156,  -156,  -148,  -149,  -156,
  -153,  -154,  -156,   259,  -156,  -156,   -36,   -37,   -39,   -40,
   -81,   -23,   -56,  -156,  -156,  -156,   -30,  -150,  -156,  -156,
  -156,  -156,  -116,  -125,  -156,  -156,  -156,  -156,  -156,  -156,
  -156,  -140,  -141,  -156,  -156,  -152,  -155,    -6,    -8,   -12,
   -10,   -11,   -17,  -156,  -156,  -156,  -156,  -156,  -156,   -44,
   -46,   -48,   -49,  -156,   -35,   -58,  -156,   -33,   -27,   -29,
  -110,  -111,  -113,  -114,  -121,  -127,  -156,  -156,  -156,  -156,
  -156,  -156,  -139,  -143,  -145,  -156,  -147,  -151,  -156,    -9,
   -13,   -14,   -18,  -156,   -21,  -156,   -41,  -156,  -156,   -45,
   -47,   -50,   -34,   -63,  -156,  -156,   -57,   -67,  -156,  -156,
   -84,   -86,  -156,   -89,   -90,   -91,   -93,   -94,   -95,   -96,
   -97,   -98,  -105,  -106,  -107,  -130,  -132,  -133,  -134,  -135,
  -136,  -146,    -7,   -19,  -156,  -156,   -75,   -42,  -156,   -65,
  -156,  -156,  -156,  -156,  -107,  -156,  -156,  -156,  -156,  -156,
  -156,  -156,  -156,  -156,  -156,  -156,  -156,  -156,   -38,   -80,
  -156,   -88,   -20,   -22,  -156,   -43,   -51,   -52,  -156,  -156,
   -32,  -156,   -64,   -59,   -61,   -62,   -15,   -92,   -85,  -156,
  -156,  -156,  -156,  -156,  -156,   -71,   -72,   -77,  -156,   -79,
   -99,  -100,  -101,  -102,  -103,  -104,   -87,   -74,   -53,  -156,
   -66,  -156,  -156,   -70,   -76,  -156,  -156,   -78,  -156,   -55,
   -83,   -60,  -156,   -69,   -73,   -54,  -156,   -68,   -82 ]

racc_goto_table = [
    66,    17,   146,    55,   133,    56,   175,    88,   198,    15,
   225,    92,   112,   113,   215,   110,   111,   214,   206,   207,
   248,    74,   249,   213,   218,   236,   201,   223,   125,   227,
    72,   230,   231,   232,   233,   234,   235,    90,   123,   104,
   124,   183,   243,   210,     2,     3,     4,   198,   109,   132,
     5,    73,    10,    87,   107,   129,    56,    17,   115,   242,
    93,   244,    13,    61,    62,   108,   105,   143,   179,   117,
   118,   119,   120,   121,   215,   237,   212,   251,     1,   198,
   199,   172,   205,   nil,   202,   253,   142,   134,   nil,   136,
   nil,   nil,   257,   nil,   nil,   246,    73,    73,    73,    73,
   nil,   nil,   nil,   nil,   238,   nil,   nil,   nil,   nil,   nil,
   nil,    90,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   176,   178,
   177,    56,   nil,   nil,   nil,   nil,   nil,   nil,   184,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   134,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   176,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    74,   nil,   176,   nil,   nil,
   nil,   nil,   250,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   258 ]

racc_goto_check = [
    11,    18,    38,    14,    17,    29,    19,     8,    12,    22,
    48,    15,    61,    61,    43,    59,    59,    42,    36,    37,
    39,    18,    40,    41,    52,    53,    54,    46,    63,    46,
    64,    46,    46,    46,    46,    46,    46,    11,    75,    11,
    76,    38,    48,    28,     2,     3,     4,    12,    11,    15,
     5,    60,     6,     7,    14,    10,    29,    18,    11,    46,
    16,    46,    20,    21,    24,    22,    25,    26,    27,    18,
    18,    18,    18,    18,    43,    19,    38,    42,     1,    12,
    31,     8,    35,   nil,    17,    46,    11,    18,   nil,    29,
   nil,   nil,    46,   nil,   nil,    19,    60,    60,    60,    60,
   nil,   nil,   nil,   nil,    38,   nil,   nil,   nil,   nil,   nil,
   nil,    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    18,    14,
    29,    29,   nil,   nil,   nil,   nil,   nil,   nil,    18,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    18,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    18,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    18,   nil,    18,   nil,   nil,
   nil,   nil,    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    11 ]

racc_goto_pointer = [
   nil,    78,    44,    45,    46,    50,    47,    -1,   -47,   nil,
   -34,   -17,  -141,   nil,    -9,   -44,     5,   -90,    -7,  -129,
    54,    50,     1,   nil,    51,     4,   -38,   -75,  -136,    -7,
   nil,   -69,   nil,   nil,   nil,   -96,  -160,  -159,  -104,  -219,
  -217,  -158,  -164,  -167,   nil,   nil,  -160,   nil,  -178,   nil,
   nil,   nil,  -161,  -175,  -126,   nil,   nil,   nil,   nil,   -53,
    28,   -58,   nil,   -55,     7,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -45,   -43,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   182,   nil,   nil,   nil,    89,
   nil,    34,   147,     6,   nil,   nil,   nil,   nil,   164,   nil,
   nil,   nil,   nil,    16,   nil,   nil,   nil,   nil,   nil,    35,
    57,   226,    58,    59,    98,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    26,   163,   157,   148,   158,   nil,   159,
   160,   161,   150,   151,   153,   154,   155,   156,   162,    19,
    20,    21,    22,    23,    24,    25,    27,    29,    30,    31,
    33,    37,    42,    43,    46,   nil,   nil,    50,    51 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 62, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  2, 64, :_reduce_4,
  0, 67, :_reduce_none,
  3, 67, :_reduce_6,
  3, 68, :_reduce_7,
  1, 68, :_reduce_none,
  2, 69, :_reduce_9,
  1, 70, :_reduce_none,
  1, 70, :_reduce_11,
  0, 71, :_reduce_12,
  1, 71, :_reduce_13,
  1, 71, :_reduce_14,
  3, 73, :_reduce_15,
  1, 66, :_reduce_none,
  4, 65, :_reduce_17,
  5, 65, :_reduce_18,
  3, 77, :_reduce_19,
  3, 78, :_reduce_20,
  1, 78, :_reduce_none,
  4, 76, :_reduce_22,
  3, 74, :_reduce_23,
  2, 74, :_reduce_24,
  1, 81, :_reduce_25,
  1, 81, :_reduce_26,
  3, 83, :_reduce_27,
  1, 83, :_reduce_none,
  3, 84, :_reduce_29,
  2, 84, :_reduce_30,
  1, 84, :_reduce_none,
  5, 82, :_reduce_32,
  2, 85, :_reduce_33,
  3, 75, :_reduce_34,
  2, 75, :_reduce_35,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 92, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  3, 93, :_reduce_41,
  4, 93, :_reduce_42,
  5, 94, :_reduce_43,
  1, 95, :_reduce_44,
  2, 95, :_reduce_45,
  1, 95, :_reduce_46,
  2, 95, :_reduce_47,
  1, 95, :_reduce_48,
  1, 95, :_reduce_49,
  2, 95, :_reduce_50,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  2, 97, :_reduce_53,
  4, 98, :_reduce_54,
  1, 100, :_reduce_none,
  0, 86, :_reduce_none,
  2, 86, :_reduce_57,
  0, 87, :_reduce_none,
  3, 87, :_reduce_59,
  3, 102, :_reduce_60,
  1, 102, :_reduce_none,
  1, 103, :_reduce_none,
  0, 88, :_reduce_none,
  2, 88, :_reduce_64,
  0, 89, :_reduce_none,
  2, 89, :_reduce_66,
  1, 105, :_reduce_none,
  6, 106, :_reduce_68,
  5, 106, :_reduce_69,
  4, 108, :_reduce_70,
  3, 108, :_reduce_71,
  1, 109, :_reduce_none,
  3, 109, :_reduce_73,
  3, 80, :_reduce_74,
  1, 80, :_reduce_none,
  4, 110, :_reduce_76,
  3, 110, :_reduce_77,
  4, 111, :_reduce_78,
  3, 111, :_reduce_79,
  2, 112, :_reduce_80,
  1, 90, :_reduce_81,
  3, 101, :_reduce_82,
  1, 101, :_reduce_none,
  1, 99, :_reduce_none,
  3, 99, :_reduce_85,
  1, 113, :_reduce_none,
  3, 113, :_reduce_87,
  2, 114, :_reduce_88,
  1, 114, :_reduce_none,
  1, 115, :_reduce_none,
  1, 116, :_reduce_none,
  3, 116, :_reduce_92,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  3, 118, :_reduce_99,
  3, 118, :_reduce_100,
  3, 118, :_reduce_101,
  3, 118, :_reduce_102,
  3, 118, :_reduce_103,
  3, 118, :_reduce_104,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 119, :_reduce_none,
  1, 79, :_reduce_none,
  1, 79, :_reduce_none,
  3, 120, :_reduce_110,
  3, 120, :_reduce_111,
  1, 120, :_reduce_none,
  3, 122, :_reduce_113,
  3, 122, :_reduce_114,
  1, 122, :_reduce_none,
  2, 123, :_reduce_116,
  1, 123, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  3, 125, :_reduce_121,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 129, :_reduce_126,
  3, 104, :_reduce_127,
  1, 104, :_reduce_none,
  1, 131, :_reduce_none,
  4, 127, :_reduce_130,
  1, 127, :_reduce_none,
  4, 132, :_reduce_132,
  4, 132, :_reduce_133,
  4, 132, :_reduce_134,
  4, 132, :_reduce_135,
  4, 132, :_reduce_136,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  3, 133, :_reduce_139,
  2, 133, :_reduce_140,
  2, 133, :_reduce_141,
  1, 133, :_reduce_142,
  3, 134, :_reduce_143,
  1, 135, :_reduce_none,
  1, 136, :_reduce_none,
  2, 137, :_reduce_146,
  1, 137, :_reduce_147,
  1, 124, :_reduce_148,
  1, 124, :_reduce_149,
  1, 72, :_reduce_150,
  3, 121, :_reduce_151,
  2, 121, :_reduce_152,
  1, 121, :_reduce_none,
  1, 138, :_reduce_none,
  2, 139, :_reduce_155 ]

racc_reduce_n = 156

racc_shift_n = 259

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :comma => 4,
  :unsigned_integer => 5,
  :ASC => 6,
  :DESC => 7,
  :left_paren => 8,
  :right_paren => 9,
  :INSERT => 10,
  :INTO => 11,
  :VALUES => 12,
  :SELECT => 13,
  :asterisk => 14,
  :AS => 15,
  :FROM => 16,
  :CROSS => 17,
  :JOIN => 18,
  :INNER => 19,
  :LEFT => 20,
  :OUTER => 21,
  :RIGHT => 22,
  :FULL => 23,
  :ON => 24,
  :USING => 25,
  :WHERE => 26,
  :GROUP => 27,
  :HAVING => 28,
  :LIMIT => 29,
  :NOT => 30,
  :BETWEEN => 31,
  :AND => 32,
  :IN => 33,
  :LIKE => 34,
  :IS => 35,
  :NULL => 36,
  :EXISTS => 37,
  :identifier => 38,
  :OR => 39,
  :equals_operator => 40,
  :not_equals_operator => 41,
  :less_than_operator => 42,
  :greater_than_operator => 43,
  :less_than_or_equals_operator => 44,
  :greater_than_or_equals_operator => 45,
  :plus_sign => 46,
  :minus_sign => 47,
  :solidus => 48,
  :CURRENT_USER => 49,
  :period => 50,
  :COUNT => 51,
  :AVG => 52,
  :MAX => 53,
  :MIN => 54,
  :SUM => 55,
  :E => 56,
  :quote => 57,
  :character_string_literal => 58,
  :DATE => 59,
  :date_string => 60 }

racc_nt_base = 61

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "comma",
  "unsigned_integer",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "asterisk",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "LIMIT",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_name",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "limit_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "numeric_value_expression",
  "general_literal",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "qualifier",
  "general_set_function",
  "exact_numeric_literal",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 21)
  def _reduce_7(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'parser.racc', 25)
  def _reduce_9(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.racc', 29)
  def _reduce_11(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_12(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_13(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_14(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_20(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_27(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 28 omitted

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 31 omitted

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_41(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_42(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 99)
  def _reduce_43(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 103)
  def _reduce_45(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_46(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_49(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_50(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 51 omitted

# reduce 52 omitted

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_53(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 55 omitted

# reduce 56 omitted

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_57(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 58 omitted

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_60(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_64(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 65 omitted

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_66(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

# reduce 67 omitted

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_68(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_69(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 155)
  def _reduce_70(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 156)
  def _reduce_71(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 72 omitted

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_73(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 163)
  def _reduce_74(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 75 omitted

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_76(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_77(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 174)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 175)
  def _reduce_79(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_82(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 83 omitted

# reduce 84 omitted

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 86 omitted

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_87(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 198)
  def _reduce_88(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

module_eval(<<'.,.,', 'parser.racc', 206)
  def _reduce_92(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_99(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_100(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 219)
  def _reduce_101(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 220)
  def _reduce_102(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_103(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 222)
  def _reduce_104(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

module_eval(<<'.,.,', 'parser.racc', 236)
  def _reduce_110(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_111(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 112 omitted

module_eval(<<'.,.,', 'parser.racc', 241)
  def _reduce_113(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 242)
  def _reduce_114(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 115 omitted

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_116(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

module_eval(<<'.,.,', 'parser.racc', 253)
  def _reduce_121(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'parser.racc', 264)
  def _reduce_126(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_127(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 128 omitted

# reduce 129 omitted

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_130(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 131 omitted

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_132(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_133(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_134(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_135(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_136(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

# reduce 137 omitted

# reduce 138 omitted

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_139(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_142(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_143(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_146(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_149(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_150(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 318)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_152(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 153 omitted

# reduce 154 omitted

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
