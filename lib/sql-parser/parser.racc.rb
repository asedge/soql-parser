#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 349)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    43,    83,  -129,   239,    83,    93,    28,    93,    69,    67,
    68,   250,    14,    73,  -141,    18,    44,   251,     9,    28,
    66,   132,    66,    11,   -86,    12,    43,     7,    18,    44,
     8,   241,    28,   242,   243,   211,  -129,  -129,  -129,    43,
  -155,    18,    44,  -154,    70,    28,    47,    48,    53,    34,
    36,    37,    38,    39,    18,    44,    49,    54,    52,    47,
    48,    58,    34,    36,    37,    38,    39,    47,    48,    49,
    63,    52,    47,    48,    64,    34,    36,    37,    38,    39,
    87,    86,    49,    66,    52,    47,    48,    43,    34,    36,
    37,    38,    39,    28,    76,    49,    77,    52,   105,    66,
    43,    78,    18,    44,   136,   137,    28,   195,   196,    79,
    80,    81,    82,    43,    84,    18,    44,    85,    88,    28,
   107,   109,    58,   116,   117,    66,    43,   129,    18,    44,
   133,   134,    28,    47,    48,    97,    34,    36,    37,    38,
    39,    18,    44,    49,   141,    52,    47,    48,   143,    34,
    36,    37,    38,    39,   144,   145,    49,   146,    52,    47,
    48,   147,    34,    36,    37,    38,    39,   148,    66,    49,
   150,    52,    47,    48,    43,    34,    36,    37,    38,    39,
    28,   152,    49,   153,    52,   154,   119,    43,   155,    18,
    44,   156,   157,    28,   158,   159,   160,   161,   164,   165,
    43,   166,    18,    44,   143,    58,    28,   172,   193,   198,
   199,   206,   207,    43,   211,    18,    44,   223,   226,    28,
    47,    48,   230,    34,    36,    37,    38,    39,    18,    44,
    49,   232,    52,    47,    48,   237,    34,    36,    37,    38,
    39,   238,   117,    49,   246,    52,    47,    48,     8,    34,
    36,    37,    38,    39,   211,    66,    49,   262,    52,    47,
    48,    43,    34,    36,    37,    38,    39,    28,   211,    49,
   263,    52,   -86,   226,    43,   246,    18,    44,   267,   269,
    28,   270,   271,   237,   273,   275,    66,    43,   nil,    18,
    44,   nil,   nil,    28,   nil,   nil,   nil,   nil,   nil,   nil,
    43,   nil,    18,    44,   nil,   nil,    28,    47,    48,   nil,
    34,    36,    37,    38,    39,    18,    44,    49,   nil,    52,
    47,    48,   nil,    34,    36,    37,    38,    39,   126,   nil,
    49,   nil,    52,    47,    48,   nil,    34,    36,    37,    38,
    39,   nil,   nil,    49,   nil,    52,    47,    48,    43,    34,
    36,    37,    38,    39,   173,   nil,    49,   nil,    52,   nil,
   nil,    43,   nil,    18,    44,   nil,   nil,    28,   nil,   nil,
   nil,   nil,   nil,   nil,    43,   nil,    18,    44,   nil,   180,
    28,   nil,   nil,   nil,   nil,   nil,   177,   nil,   nil,    18,
    44,   nil,   nil,   nil,    47,    48,   nil,    34,    36,    37,
    38,    39,   nil,   nil,    49,   nil,    52,    47,    48,   nil,
    34,    36,    37,    38,    39,   nil,   nil,    49,   nil,    52,
    47,    48,    43,    34,    36,    37,    38,    39,   173,   nil,
    49,   nil,    52,     8,   nil,   nil,   nil,    18,    44,    43,
   nil,    98,   nil,   nil,   nil,   173,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   180,    18,    44,   nil,   nil,   nil,    99,
   177,   101,   102,   nil,   103,   104,   203,   204,    47,    48,
   nil,    34,    36,    37,    38,    39,   nil,   177,    49,   nil,
    52,   nil,   nil,   nil,   nil,    47,    48,    43,    34,    36,
    37,    38,    39,    28,    98,    49,   nil,    52,   nil,   nil,
   nil,    96,    18,    44,    43,    97,    98,   nil,   nil,   nil,
   173,   nil,    99,   nil,   101,   102,   nil,   103,   104,    18,
    44,   nil,   nil,   nil,    99,   nil,   101,   102,   nil,   103,
   104,   nil,   nil,    47,    48,   180,    34,    36,    37,    38,
    39,   nil,   177,    49,   nil,    52,   nil,   nil,   nil,   nil,
    47,    48,    43,    34,    36,    37,    38,    39,   173,   nil,
    49,   nil,    52,   nil,   nil,   nil,   nil,    18,    44,    43,
   nil,   nil,   nil,   nil,   nil,   173,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   180,    18,    44,   nil,   nil,   nil,   nil,
   177,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,
   180,    34,    36,    37,    38,    39,   nil,   177,    49,   nil,
    52,   nil,   nil,   nil,   nil,    47,    48,    43,    34,    36,
    37,    38,    39,   244,   nil,    49,   nil,    52,   nil,   nil,
    43,   nil,    18,    44,   nil,   nil,   244,   nil,   nil,   nil,
   nil,   nil,   nil,    43,   nil,    18,    44,   nil,   nil,   244,
   nil,   nil,   nil,   nil,   nil,   nil,    43,   nil,    18,    44,
   nil,   nil,   244,    47,    48,   nil,    34,    36,    37,    38,
    39,    18,    44,    49,   nil,    52,    47,    48,   nil,    34,
    36,    37,    38,    39,   nil,   nil,    49,   nil,    52,    47,
    48,   nil,    34,    36,    37,    38,    39,   nil,   nil,    49,
   nil,    52,    47,    48,    43,    34,    36,    37,    38,    39,
   244,   nil,    49,   nil,    52,   nil,   nil,    43,   nil,    18,
    44,   nil,   nil,   244,   nil,   nil,   nil,   nil,   nil,   nil,
    43,   nil,    18,    44,   nil,   nil,   244,   nil,   nil,   nil,
   nil,   nil,   nil,    43,   nil,    18,    44,   nil,   nil,   244,
    47,    48,   nil,    34,    36,    37,    38,    39,    18,    44,
    49,   nil,    52,    47,    48,   nil,    34,    36,    37,    38,
    39,   nil,   nil,    49,   nil,    52,    47,    48,   nil,    34,
    36,    37,    38,    39,   nil,   nil,    49,   nil,    52,    47,
    48,    43,    34,    36,    37,    38,    39,   173,   nil,    49,
   nil,    52,   nil,   nil,    43,   nil,    18,    44,   nil,   nil,
   244,   nil,   nil,   nil,   nil,   nil,   nil,    43,   nil,    18,
    44,   nil,   180,   244,   nil,   nil,   nil,   nil,   nil,   177,
   nil,   nil,    18,    44,   nil,   nil,   nil,    47,    48,   nil,
    34,    36,    37,    38,    39,   nil,   nil,    49,   nil,    52,
    47,    48,   nil,    34,    36,    37,    38,    39,   nil,   nil,
    49,   nil,    52,    47,    48,    43,    34,    36,    37,    38,
    39,    28,   nil,    49,   nil,    52,     8,   nil,    43,   nil,
    18,    44,   nil,   nil,    28,   nil,   nil,   nil,   nil,     8,
   nil,    43,   nil,    18,    44,   nil,   nil,   244,   nil,   nil,
   nil,   nil,   nil,   nil,    43,   nil,    18,    44,   nil,   nil,
   244,    47,    48,   nil,    34,    36,    37,    38,    39,    18,
    44,    49,   nil,    52,    47,    48,   nil,    34,    36,    37,
    38,    39,   nil,   nil,    49,   nil,    52,    47,    48,   nil,
    34,    36,    37,    38,    39,   nil,   nil,    49,   nil,    52,
    47,    48,   nil,    34,    36,    37,    38,    39,   nil,   nil,
    49,   nil,    52,   212,   213,   nil,   214,   215,   216,   nil,
   nil,   nil,   217,   218,   219,   220,   221,   222 ]

racc_action_check = [
     8,    43,    20,   209,    73,    54,     8,   134,    22,    21,
    21,   216,     8,    23,    18,     8,     8,   216,     1,    23,
    54,    85,   134,     5,    18,     7,    28,     0,    23,    23,
     0,   212,    28,   212,   212,   209,    20,    20,    20,    64,
    43,    28,    28,    73,    22,    64,     8,     8,     9,     8,
     8,     8,     8,     8,    64,    64,     8,    11,     8,    23,
    23,    12,    23,    23,    23,    23,    23,    85,    85,    23,
    13,    23,    28,    28,    16,    28,    28,    28,    28,    28,
    49,    49,    28,    17,    28,    64,    64,    67,    64,    64,
    64,    64,    64,    67,    31,    64,    34,    64,    56,    56,
    68,    36,    67,    67,    91,    91,    68,   164,   164,    37,
    38,    39,    40,    69,    44,    68,    68,    45,    52,    69,
    58,    62,    63,    74,    75,    76,    70,    83,    69,    69,
    86,    89,    70,    67,    67,    95,    67,    67,    67,    67,
    67,    70,    70,    67,    97,    67,    68,    68,    98,    68,
    68,    68,    68,    68,    99,   100,    68,   102,    68,    69,
    69,   103,    69,    69,    69,    69,    69,   104,   105,    69,
   107,    69,    70,    70,    77,    70,    70,    70,    70,    70,
    77,   108,    70,   109,    70,   119,    77,    78,   120,    77,
    77,   121,   122,    78,   123,   124,   125,   126,   135,   139,
    79,   140,    78,    78,   144,   145,    79,   151,   153,   167,
   168,   171,   172,    80,   174,    79,    79,   177,   178,    80,
    77,    77,   204,    77,    77,    77,    77,    77,    80,    80,
    77,   205,    77,    78,    78,   207,    78,    78,    78,    78,
    78,   208,   210,    78,   214,    78,    79,    79,   223,    79,
    79,    79,    79,    79,   229,   230,    79,   232,    79,    80,
    80,    81,    80,    80,    80,    80,    80,    81,   233,    80,
   234,    80,   237,   240,    82,   242,    81,    81,   245,   250,
    82,   259,   260,   263,   264,   268,   271,    96,   nil,    82,
    82,   nil,   nil,    96,   nil,   nil,   nil,   nil,   nil,   nil,
   141,   nil,    96,    96,   nil,   nil,   141,    81,    81,   nil,
    81,    81,    81,    81,    81,   141,   141,    81,   nil,    81,
    82,    82,   nil,    82,    82,    82,    82,    82,    82,   nil,
    82,   nil,    82,    96,    96,   nil,    96,    96,    96,    96,
    96,   nil,   nil,    96,   nil,    96,   141,   141,   152,   141,
   141,   141,   141,   141,   152,   nil,   141,   nil,   141,   nil,
   nil,   161,   nil,   152,   152,   nil,   nil,   161,   nil,   nil,
   nil,   nil,   nil,   nil,   166,   nil,   161,   161,   nil,   152,
   166,   nil,   nil,   nil,   nil,   nil,   152,   nil,   nil,   166,
   166,   nil,   nil,   nil,   152,   152,   nil,   152,   152,   152,
   152,   152,   nil,   nil,   152,   nil,   152,   161,   161,   nil,
   161,   161,   161,   161,   161,   nil,   nil,   161,   nil,   161,
   166,   166,   173,   166,   166,   166,   166,   166,   173,   nil,
   166,   nil,   166,   173,   nil,   nil,   nil,   173,   173,   180,
   nil,   170,   nil,   nil,   nil,   180,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   173,   180,   180,   nil,   nil,   nil,   170,
   173,   170,   170,   nil,   170,   170,   170,   170,   173,   173,
   nil,   173,   173,   173,   173,   173,   nil,   180,   173,   nil,
   173,   nil,   nil,   nil,   nil,   180,   180,   199,   180,   180,
   180,   180,   180,   199,    55,   180,   nil,   180,   nil,   nil,
   nil,    55,   199,   199,   203,    55,   110,   nil,   nil,   nil,
   203,   nil,    55,   nil,    55,    55,   nil,    55,    55,   203,
   203,   nil,   nil,   nil,   110,   nil,   110,   110,   nil,   110,
   110,   nil,   nil,   199,   199,   203,   199,   199,   199,   199,
   199,   nil,   203,   199,   nil,   199,   nil,   nil,   nil,   nil,
   203,   203,   206,   203,   203,   203,   203,   203,   206,   nil,
   203,   nil,   203,   nil,   nil,   nil,   nil,   206,   206,   211,
   nil,   nil,   nil,   nil,   nil,   211,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   206,   211,   211,   nil,   nil,   nil,   nil,
   206,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   206,   206,
   211,   206,   206,   206,   206,   206,   nil,   211,   206,   nil,
   206,   nil,   nil,   nil,   nil,   211,   211,   213,   211,   211,
   211,   211,   211,   213,   nil,   211,   nil,   211,   nil,   nil,
   215,   nil,   213,   213,   nil,   nil,   215,   nil,   nil,   nil,
   nil,   nil,   nil,   217,   nil,   215,   215,   nil,   nil,   217,
   nil,   nil,   nil,   nil,   nil,   nil,   218,   nil,   217,   217,
   nil,   nil,   218,   213,   213,   nil,   213,   213,   213,   213,
   213,   218,   218,   213,   nil,   213,   215,   215,   nil,   215,
   215,   215,   215,   215,   nil,   nil,   215,   nil,   215,   217,
   217,   nil,   217,   217,   217,   217,   217,   nil,   nil,   217,
   nil,   217,   218,   218,   219,   218,   218,   218,   218,   218,
   219,   nil,   218,   nil,   218,   nil,   nil,   220,   nil,   219,
   219,   nil,   nil,   220,   nil,   nil,   nil,   nil,   nil,   nil,
   221,   nil,   220,   220,   nil,   nil,   221,   nil,   nil,   nil,
   nil,   nil,   nil,   222,   nil,   221,   221,   nil,   nil,   222,
   219,   219,   nil,   219,   219,   219,   219,   219,   222,   222,
   219,   nil,   219,   220,   220,   nil,   220,   220,   220,   220,
   220,   nil,   nil,   220,   nil,   220,   221,   221,   nil,   221,
   221,   221,   221,   221,   nil,   nil,   221,   nil,   221,   222,
   222,   226,   222,   222,   222,   222,   222,   226,   nil,   222,
   nil,   222,   nil,   nil,   241,   nil,   226,   226,   nil,   nil,
   241,   nil,   nil,   nil,   nil,   nil,   nil,   243,   nil,   241,
   241,   nil,   226,   243,   nil,   nil,   nil,   nil,   nil,   226,
   nil,   nil,   243,   243,   nil,   nil,   nil,   226,   226,   nil,
   226,   226,   226,   226,   226,   nil,   nil,   226,   nil,   226,
   241,   241,   nil,   241,   241,   241,   241,   241,   nil,   nil,
   241,   nil,   241,   243,   243,   244,   243,   243,   243,   243,
   243,   244,   nil,   243,   nil,   243,   244,   nil,   246,   nil,
   244,   244,   nil,   nil,   246,   nil,   nil,   nil,   nil,   246,
   nil,   267,   nil,   246,   246,   nil,   nil,   267,   nil,   nil,
   nil,   nil,   nil,   nil,   273,   nil,   267,   267,   nil,   nil,
   273,   244,   244,   nil,   244,   244,   244,   244,   244,   273,
   273,   244,   nil,   244,   246,   246,   nil,   246,   246,   246,
   246,   246,   nil,   nil,   246,   nil,   246,   267,   267,   nil,
   267,   267,   267,   267,   267,   nil,   nil,   267,   nil,   267,
   273,   273,   nil,   273,   273,   273,   273,   273,   nil,   nil,
   273,   nil,   273,   176,   176,   nil,   176,   176,   176,   nil,
   nil,   nil,   176,   176,   176,   176,   176,   176 ]

racc_action_pointer = [
    14,    18,   nil,   nil,   nil,    21,   nil,    11,    -5,    48,
   nil,    54,    41,    52,   nil,   nil,    70,    63,     3,   nil,
   -15,   -42,    -9,     8,   nil,   nil,   nil,   nil,    21,   nil,
   nil,    73,   nil,   nil,    85,   nil,    90,    98,    99,   100,
   101,   nil,   nil,   -20,   109,    57,   nil,   nil,   nil,    19,
   nil,   nil,    54,   nil,     0,   490,    79,   nil,    99,   nil,
   nil,   nil,    91,   102,    34,   nil,   nil,    82,    95,   108,
   121,   nil,   nil,   -17,   118,   112,   105,   169,   182,   195,
   208,   256,   269,   122,   nil,    16,    69,   nil,   nil,   127,
   nil,    98,   nil,   nil,   nil,   120,   282,   133,   128,   131,
   132,   nil,   131,   135,   141,   148,   nil,   150,   149,   152,
   502,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   173,
   176,   179,   180,   182,   183,   184,   193,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,   190,   nil,   nil,   nil,   187,
   197,   295,   nil,   nil,   184,   185,   nil,   nil,   nil,   nil,
   nil,   174,   343,   188,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   356,   nil,   nil,    98,   nil,   369,   197,   206,   nil,
   437,   177,   209,   417,   170,   nil,   927,   206,   180,   nil,
   434,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   482,
   nil,   nil,   nil,   499,   211,   196,   547,   215,   229,    -9,
   230,   564,    -6,   612,   233,   625,   -25,   638,   651,   699,
   712,   725,   738,   232,   nil,   nil,   786,   nil,   nil,   210,
   235,   nil,   252,   224,   266,   nil,   nil,   251,   nil,   nil,
   235,   799,   264,   812,   860,   240,   873,   nil,   nil,   nil,
   237,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   269,
   278,   nil,   nil,   263,   246,   nil,   nil,   886,   273,   nil,
   nil,   266,   nil,   899,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -164,  -164,    -1,    -2,    -3,    -5,   -19,  -164,  -164,  -164,
    -4,  -164,  -164,   -27,   -28,   -29,   -31,   -33,  -158,  -113,
  -114,  -117,  -120,  -164,  -122,  -123,  -124,  -125,  -164,  -127,
  -128,  -164,  -131,  -132,  -164,  -134,  -164,  -164,  -164,  -164,
  -164,  -145,  -146,  -150,  -164,  -164,  -152,  -156,  -157,  -164,
  -161,  -162,  -164,   278,  -164,  -164,   -38,   -39,   -86,   -42,
   -43,   -26,   -59,  -164,  -164,   -32,  -158,  -164,  -164,  -164,
  -164,  -121,  -129,  -150,  -164,  -164,  -164,  -164,  -164,  -164,
  -164,  -164,  -164,  -148,  -149,  -164,  -164,  -160,  -163,    -6,
    -8,   -12,   -10,   -11,   -20,  -164,  -164,  -164,  -164,  -164,
  -164,   -47,   -49,   -51,   -52,  -164,   -37,  -164,   -61,  -164,
   -35,   -30,  -115,  -116,  -118,  -119,  -154,  -126,  -130,  -164,
  -164,  -164,  -164,  -164,  -164,  -164,  -164,  -143,  -144,  -147,
  -151,  -153,  -155,  -159,  -164,   -15,   -13,   -14,   -21,  -164,
   -24,  -164,   -44,   -86,  -164,  -164,   -48,   -50,   -53,   -36,
   -40,   -63,  -164,  -164,  -133,  -135,  -136,  -137,  -138,  -139,
  -140,  -164,    -7,    -9,  -164,   -22,  -164,  -164,   -80,   -45,
  -164,   -68,  -164,  -164,   -62,   -72,  -164,  -164,   -89,   -91,
  -164,   -94,   -95,   -96,   -98,   -99,  -100,  -101,  -102,  -103,
  -110,  -111,  -112,   -60,  -142,   -16,   -17,   -23,   -25,  -164,
   -46,   -54,   -55,  -164,  -164,   -70,  -164,  -164,  -164,  -164,
  -112,  -164,  -164,  -164,  -164,  -164,  -164,  -164,  -164,  -164,
  -164,  -164,  -164,  -164,   -41,   -85,  -164,   -93,   -79,   -56,
  -164,   -34,  -164,   -69,   -64,   -66,   -67,  -158,   -18,   -97,
   -90,  -164,  -164,  -164,  -164,  -164,  -164,   -76,   -77,   -82,
  -164,   -84,  -104,  -105,  -106,  -107,  -108,  -109,   -92,  -164,
   -58,   -88,   -71,  -164,  -164,   -75,   -81,  -164,  -164,   -83,
   -57,  -164,   -65,  -164,   -74,   -78,   -87,   -73 ]

racc_goto_table = [
    65,    17,    55,   167,    56,    90,   139,   127,    15,   235,
     1,   236,   224,   247,    94,     2,    74,   112,   113,   114,
   115,    75,     3,     4,     5,    10,    89,   135,   163,   174,
    95,    13,    61,    62,   108,   151,   171,    92,   245,   106,
   249,   265,   252,   253,   254,   255,   256,   257,   205,   224,
   209,   231,   225,   110,   138,    56,    72,    17,   200,   118,
   201,   228,   202,   259,   111,   272,   264,   236,   266,   260,
   120,   121,   122,   123,   124,   128,   197,   224,    74,   234,
   229,   240,   258,   233,   227,   162,   194,    71,   149,   140,
   142,   125,   274,   130,   131,   nil,   nil,   nil,   277,   nil,
    72,    72,    72,    72,   nil,   nil,   nil,   nil,   268,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    92,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   168,   170,   169,    56,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   128,   nil,   nil,   nil,   nil,   140,
   nil,   nil,   nil,   nil,   nil,   nil,   210,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   168,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   261,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    75,   nil,   168,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   276 ]

racc_goto_check = [
    12,    19,    15,    20,    31,     8,    18,    75,    23,    44,
     1,    45,    13,    50,    16,     2,    65,    61,    61,    63,
    63,    19,     3,     4,     5,     6,     7,    10,    11,    40,
    17,    21,    22,    25,    26,    27,    28,    12,    48,    12,
    48,    50,    48,    48,    48,    48,    48,    48,    29,    13,
    40,    30,    33,    15,    16,    31,    62,    19,    37,    12,
    38,    20,    39,    41,    23,    44,    48,    45,    48,    42,
    19,    19,    19,    19,    19,    19,    18,    13,    65,    43,
    40,    54,    55,    40,    56,     8,    75,    66,    12,    19,
    31,    74,    48,    79,    80,   nil,   nil,   nil,    48,   nil,
    62,    62,    62,    62,   nil,   nil,   nil,   nil,    20,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    19,    15,    31,    31,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,   nil,    19,
   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,   nil,    19,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    12 ]

racc_goto_pointer = [
   nil,    10,    15,    22,    23,    24,    20,   -28,   -49,   nil,
   -64,  -107,   -17,  -165,   nil,   -10,   -41,   -25,   -90,    -7,
  -138,    23,    19,     0,   nil,    20,   -28,   -73,  -115,  -123,
  -154,    -8,   nil,  -125,   nil,   nil,   nil,  -112,  -110,  -108,
  -123,  -167,  -161,  -128,  -198,  -196,   nil,   nil,  -175,   nil,
  -201,   nil,   nil,   nil,  -130,  -144,   -96,   nil,   nil,   nil,
   nil,   -50,    33,   -50,   nil,    -7,    64,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     9,   -75,   nil,   nil,   nil,     8,
     9,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   208,   nil,   nil,   nil,    91,
   nil,   nil,    32,   175,     6,   nil,   nil,   nil,   nil,   192,
   nil,   nil,   nil,   nil,    16,   nil,   nil,   nil,   nil,   nil,
   nil,    33,    57,   248,    59,    60,   100,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    26,   191,   185,   176,   186,
   nil,   187,   188,   189,   178,   179,   181,   182,   183,   184,
   190,    19,    20,    21,    22,    23,    24,    25,    27,    29,
    30,    31,    35,    40,   nil,   nil,    41,    42,    45,   nil,
    46,    50,    51 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 66, :_reduce_none,
  1, 67, :_reduce_none,
  1, 67, :_reduce_none,
  2, 68, :_reduce_4,
  0, 71, :_reduce_none,
  3, 71, :_reduce_6,
  3, 72, :_reduce_7,
  1, 72, :_reduce_none,
  3, 73, :_reduce_9,
  1, 74, :_reduce_none,
  1, 74, :_reduce_11,
  0, 75, :_reduce_none,
  1, 75, :_reduce_13,
  1, 75, :_reduce_14,
  0, 76, :_reduce_none,
  2, 76, :_reduce_16,
  2, 76, :_reduce_17,
  3, 78, :_reduce_18,
  1, 70, :_reduce_none,
  4, 69, :_reduce_20,
  5, 69, :_reduce_21,
  3, 82, :_reduce_22,
  3, 83, :_reduce_23,
  1, 83, :_reduce_none,
  4, 81, :_reduce_25,
  3, 79, :_reduce_26,
  2, 79, :_reduce_27,
  1, 86, :_reduce_28,
  1, 86, :_reduce_29,
  3, 88, :_reduce_30,
  1, 88, :_reduce_none,
  2, 89, :_reduce_32,
  1, 89, :_reduce_none,
  6, 87, :_reduce_34,
  2, 90, :_reduce_35,
  3, 80, :_reduce_36,
  2, 80, :_reduce_37,
  1, 80, :_reduce_none,
  1, 80, :_reduce_none,
  3, 80, :_reduce_40,
  1, 98, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  3, 99, :_reduce_44,
  4, 99, :_reduce_45,
  5, 100, :_reduce_46,
  1, 101, :_reduce_47,
  2, 101, :_reduce_48,
  1, 101, :_reduce_49,
  2, 101, :_reduce_50,
  1, 101, :_reduce_51,
  1, 101, :_reduce_52,
  2, 101, :_reduce_53,
  1, 102, :_reduce_none,
  1, 102, :_reduce_none,
  2, 103, :_reduce_56,
  4, 104, :_reduce_57,
  1, 106, :_reduce_none,
  0, 91, :_reduce_none,
  3, 91, :_reduce_60,
  0, 92, :_reduce_none,
  2, 92, :_reduce_62,
  0, 93, :_reduce_none,
  3, 93, :_reduce_64,
  3, 108, :_reduce_65,
  1, 108, :_reduce_none,
  1, 109, :_reduce_none,
  0, 94, :_reduce_none,
  2, 94, :_reduce_69,
  0, 95, :_reduce_none,
  2, 95, :_reduce_71,
  1, 111, :_reduce_none,
  6, 112, :_reduce_73,
  5, 112, :_reduce_74,
  4, 114, :_reduce_75,
  3, 114, :_reduce_76,
  1, 115, :_reduce_none,
  3, 115, :_reduce_78,
  3, 85, :_reduce_79,
  1, 85, :_reduce_none,
  4, 116, :_reduce_81,
  3, 116, :_reduce_82,
  4, 117, :_reduce_83,
  3, 117, :_reduce_84,
  2, 118, :_reduce_85,
  1, 96, :_reduce_86,
  3, 107, :_reduce_87,
  1, 107, :_reduce_none,
  1, 105, :_reduce_none,
  3, 105, :_reduce_90,
  1, 119, :_reduce_none,
  3, 119, :_reduce_92,
  2, 120, :_reduce_93,
  1, 120, :_reduce_none,
  1, 121, :_reduce_none,
  1, 122, :_reduce_none,
  3, 122, :_reduce_97,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 123, :_reduce_none,
  3, 124, :_reduce_104,
  3, 124, :_reduce_105,
  3, 124, :_reduce_106,
  3, 124, :_reduce_107,
  3, 124, :_reduce_108,
  3, 124, :_reduce_109,
  1, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 125, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  3, 126, :_reduce_115,
  3, 126, :_reduce_116,
  1, 126, :_reduce_none,
  3, 128, :_reduce_118,
  3, 128, :_reduce_119,
  1, 128, :_reduce_none,
  2, 129, :_reduce_121,
  1, 129, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  1, 131, :_reduce_none,
  3, 131, :_reduce_126,
  1, 132, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  3, 110, :_reduce_130,
  1, 110, :_reduce_none,
  1, 136, :_reduce_none,
  4, 133, :_reduce_133,
  1, 133, :_reduce_none,
  4, 137, :_reduce_135,
  4, 137, :_reduce_136,
  4, 137, :_reduce_137,
  4, 137, :_reduce_138,
  4, 137, :_reduce_139,
  4, 137, :_reduce_140,
  1, 138, :_reduce_none,
  3, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 140, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  3, 141, :_reduce_147,
  2, 141, :_reduce_148,
  2, 141, :_reduce_149,
  1, 141, :_reduce_150,
  3, 142, :_reduce_151,
  1, 143, :_reduce_none,
  1, 144, :_reduce_none,
  2, 145, :_reduce_154,
  1, 145, :_reduce_155,
  1, 130, :_reduce_156,
  1, 130, :_reduce_157,
  1, 77, :_reduce_158,
  3, 127, :_reduce_159,
  2, 127, :_reduce_160,
  1, 127, :_reduce_none,
  1, 146, :_reduce_none,
  2, 147, :_reduce_163 ]

racc_reduce_n = 164

racc_shift_n = 278

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :comma => 4,
  :unsigned_integer => 5,
  :ASC => 6,
  :DESC => 7,
  :NULLS => 8,
  :FIRST => 9,
  :LAST => 10,
  :left_paren => 11,
  :right_paren => 12,
  :INSERT => 13,
  :INTO => 14,
  :VALUES => 15,
  :SELECT => 16,
  :asterisk => 17,
  :FROM => 18,
  :AS => 19,
  :identifier => 20,
  :period => 21,
  :CROSS => 22,
  :JOIN => 23,
  :INNER => 24,
  :LEFT => 25,
  :OUTER => 26,
  :RIGHT => 27,
  :FULL => 28,
  :ON => 29,
  :USING => 30,
  :SCOPE => 31,
  :WHERE => 32,
  :GROUP => 33,
  :HAVING => 34,
  :LIMIT => 35,
  :NOT => 36,
  :BETWEEN => 37,
  :AND => 38,
  :IN => 39,
  :LIKE => 40,
  :IS => 41,
  :NULL => 42,
  :EXISTS => 43,
  :OR => 44,
  :equals_operator => 45,
  :not_equals_operator => 46,
  :less_than_operator => 47,
  :greater_than_operator => 48,
  :less_than_or_equals_operator => 49,
  :greater_than_or_equals_operator => 50,
  :plus_sign => 51,
  :minus_sign => 52,
  :solidus => 53,
  :COUNT => 54,
  :AVG => 55,
  :MAX => 56,
  :MIN => 57,
  :SUM => 58,
  :func_args_list => 59,
  :E => 60,
  :quote => 61,
  :character_string_literal => 62,
  :DATE => 63,
  :date_string => 64 }

racc_nt_base = 65

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "comma",
  "unsigned_integer",
  "ASC",
  "DESC",
  "NULLS",
  "FIRST",
  "LAST",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "asterisk",
  "FROM",
  "AS",
  "identifier",
  "period",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "SCOPE",
  "WHERE",
  "GROUP",
  "HAVING",
  "LIMIT",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "func_args_list",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "nulls_ordering_specification",
  "column_name",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "from_clause",
  "using_scope_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "limit_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "numeric_value_expression",
  "general_literal",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "unsigned_numeric_literal",
  "qualifier",
  "general_set_function",
  "func_name",
  "func_arg_list",
  "func_arg_expr",
  "exact_numeric_literal",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 21)
  def _reduce_7(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'parser.racc', 25)
  def _reduce_9(val, _values, result)
     result = SQLParser::Statement::OrderColumn.new(val[0], val[1], val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.racc', 29)
  def _reduce_11(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_13(val, _values, result)
     result = SQLParser::Statement::Ascending.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_14(val, _values, result)
     result = SQLParser::Statement::Descending.new 
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::NullsFirst.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::NullsLast.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 44)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 19 omitted

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_20(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 51)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_23(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_30(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 31 omitted

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 33 omitted

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3], val[4], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_37(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

module_eval(<<'.,.,', 'parser.racc', 90)
  def _reduce_40(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

module_eval(<<'.,.,', 'parser.racc', 100)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 101)
  def _reduce_45(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_46(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_49(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_50(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 111)
  def _reduce_51(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 112)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_53(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 54 omitted

# reduce 55 omitted

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 123)
  def _reduce_57(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 58 omitted

# reduce 59 omitted

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::UsingScope.new(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_62(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_64(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 141)
  def _reduce_65(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

module_eval(<<'.,.,', 'parser.racc', 149)
  def _reduce_69(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 70 omitted

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_71(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

# reduce 72 omitted

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_73(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_74(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 164)
  def _reduce_75(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 165)
  def _reduce_76(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.racc', 169)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_79(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 80 omitted

module_eval(<<'.,.,', 'parser.racc', 179)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 180)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 183)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_84(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_86(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_87(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 88 omitted

# reduce 89 omitted

module_eval(<<'.,.,', 'parser.racc', 200)
  def _reduce_90(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 91 omitted

module_eval(<<'.,.,', 'parser.racc', 204)
  def _reduce_92(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 207)
  def _reduce_93(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.racc', 215)
  def _reduce_97(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_104(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_105(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 228)
  def _reduce_106(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 229)
  def _reduce_107(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_108(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_109(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_115(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_116(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 117 omitted

module_eval(<<'.,.,', 'parser.racc', 250)
  def _reduce_118(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 251)
  def _reduce_119(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 120 omitted

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_121(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_126(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_130(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 131 omitted

# reduce 132 omitted

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_133(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 134 omitted

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_135(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_136(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 285)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_139(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::Function.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_149(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_150(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 152 omitted

# reduce 153 omitted

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_154(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_156(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_157(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 330)
  def _reduce_158(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 334)
  def _reduce_159(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 335)
  def _reduce_160(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 161 omitted

# reduce 162 omitted

module_eval(<<'.,.,', 'parser.racc', 342)
  def _reduce_163(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
