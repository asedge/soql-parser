#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 334)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    44,    84,    84,   227,   222,   233,    94,    94,   106,    71,
    68,   234,    18,    45,    44,    18,    99,    28,    68,    68,
    97,    66,     7,    68,    98,     8,    18,    45,   221,   130,
   119,   100,   229,   102,   103,   190,   104,   105,     8,  -148,
  -147,  -126,    48,    49,    72,    32,    36,    38,    39,    40,
    41,   244,    50,   245,    53,   190,    48,    49,   246,    32,
    36,    38,    39,    40,    41,   205,    50,    44,    53,   229,
   151,    48,    49,   250,  -126,  -126,  -126,    69,    70,    18,
    45,   252,    99,    44,   190,   224,    28,   225,   226,    88,
    87,   134,   135,    68,   158,    18,    45,   100,    18,   102,
   103,   155,   104,   105,   213,   214,   257,   259,   260,    48,
    49,   261,    32,    36,    38,    39,    40,    41,    68,    50,
     9,    53,    11,    99,    12,    48,    49,    54,    32,    36,
    38,    39,    40,    41,    55,    50,    44,    53,   100,   151,
   102,   103,    59,   104,   105,    64,    65,   -82,    18,    45,
    78,    79,    44,    80,    81,    28,    82,    83,    85,    86,
    89,   108,   110,   158,    18,    45,    59,    68,   118,   119,
   155,    68,   127,   131,   132,    98,   139,   141,    48,    49,
   142,    32,    36,    38,    39,    40,    41,   143,    50,   144,
    53,   145,   146,    68,    48,    49,   148,    32,    36,    38,
    39,    40,    41,   150,    50,    44,    53,   171,    28,   172,
   173,   174,   175,   176,   178,   179,   141,    18,    45,    44,
    59,   185,    28,   186,   191,   192,   190,   193,   194,   195,
   202,    18,    45,   196,   197,   198,   199,   200,   201,   205,
   208,   209,   216,   nil,   nil,   nil,   nil,    48,    49,   nil,
    32,    36,    38,    39,    40,    41,   nil,    50,   nil,    53,
   nil,    48,    49,   nil,    32,    36,    38,    39,    40,    41,
   nil,    50,    44,    53,   nil,   151,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    18,    45,   nil,   nil,    44,   nil,
   nil,   227,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   158,
    18,    45,   nil,   nil,   nil,   nil,   155,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    48,    49,   nil,    32,    36,    38,
    39,    40,    41,   nil,    50,   nil,    53,   nil,   nil,   nil,
    48,    49,   nil,    32,    36,    38,    39,    40,    41,   nil,
    50,    44,    53,   nil,    28,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    18,    45,    44,   nil,   nil,    28,   nil,
   nil,   nil,   nil,     8,   nil,   nil,   nil,    18,    45,    44,
   nil,   nil,    28,   nil,   nil,   nil,   nil,     8,   nil,   nil,
   nil,    18,    45,    48,    49,   nil,    32,    36,    38,    39,
    40,    41,   nil,    50,   nil,    53,   nil,    48,    49,   nil,
    32,    36,    38,    39,    40,    41,   nil,    50,   nil,    53,
   nil,    48,    49,   nil,    32,    36,    38,    39,    40,    41,
   nil,    50,    44,    53,   nil,    28,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    18,    45,    44,   nil,   nil,    28,
   nil,   nil,   nil,   nil,   nil,   121,   nil,   nil,    18,    45,
    44,   nil,   nil,    28,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    18,    45,    48,    49,   nil,    32,    36,    38,
    39,    40,    41,   nil,    50,   nil,    53,   nil,    48,    49,
   nil,    32,    36,    38,    39,    40,    41,   nil,    50,   nil,
    53,   nil,    48,    49,   nil,    32,    36,    38,    39,    40,
    41,   nil,    50,    44,    53,   nil,   227,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    18,    45,    44,   nil,   nil,
    28,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    18,
    45,    44,   nil,   nil,    28,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    18,    45,    48,    49,   nil,    32,    36,
    38,    39,    40,    41,   nil,    50,   nil,    53,   nil,    48,
    49,   nil,    32,    36,    38,    39,    40,    41,   nil,    50,
   nil,    53,   nil,    48,    49,   nil,    32,    36,    38,    39,
    40,    41,   nil,    50,    44,    53,   nil,    28,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    18,    45,    44,   nil,
   nil,   227,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    18,    45,    44,   nil,   nil,    28,   nil,   nil,   nil,   nil,
   nil,    14,   nil,   nil,    18,    45,    48,    49,   nil,    32,
    36,    38,    39,    40,    41,   nil,    50,   nil,    53,   nil,
    48,    49,   nil,    32,    36,    38,    39,    40,    41,   nil,
    50,   nil,    53,   nil,    48,    49,   nil,    32,    36,    38,
    39,    40,    41,   nil,    50,    44,    53,   nil,   151,   nil,
   nil,   nil,   nil,     8,   nil,   nil,   nil,    18,    45,   nil,
   nil,   nil,    44,   nil,   nil,   151,   nil,   nil,   nil,   nil,
   nil,   nil,   158,   nil,    18,    45,   nil,   nil,   nil,   155,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    48,    49,   nil,
    32,    36,    38,    39,    40,    41,   155,    50,   nil,    53,
   nil,   nil,   nil,   nil,    48,    49,   nil,    32,    36,    38,
    39,    40,    41,   nil,    50,    44,    53,   nil,    28,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    18,    45,    44,
   nil,   nil,    28,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    18,    45,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    48,    49,   nil,
    32,    36,    38,    39,    40,    41,   nil,    50,   nil,    53,
   nil,    48,    49,   nil,    32,    36,    38,    39,    40,    41,
   nil,    50,    44,    53,   nil,   151,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    18,    45,   nil,   nil,    44,   nil,
   nil,    28,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   158,
    18,    45,   nil,   nil,   nil,   nil,   155,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    48,    49,   nil,    32,    36,    38,
    39,    40,    41,   nil,    50,   nil,    53,   nil,   nil,   nil,
    48,    49,   nil,    32,    36,    38,    39,    40,    41,   nil,
    50,    44,    53,   nil,   151,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    18,    45,   nil,   nil,    44,   nil,   nil,
   227,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   158,    18,
    45,   nil,   nil,   nil,   nil,   155,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    48,    49,   nil,    32,    36,    38,    39,
    40,    41,   nil,    50,   nil,    53,   nil,   nil,   nil,    48,
    49,   nil,    32,    36,    38,    39,    40,    41,   nil,    50,
    75,    53,   nil,    28,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    18,    45,    44,   nil,   nil,   227,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    18,    45,    44,   nil,
   nil,   227,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    18,    45,    48,    49,   nil,    32,    36,    38,    39,    40,
    41,   nil,    50,   nil,    53,   nil,    48,    49,   nil,    32,
    36,    38,    39,    40,    41,   nil,    50,   nil,    53,   nil,
    48,    49,   nil,    32,    36,    38,    39,    40,    41,   nil,
    50,    44,    53,   nil,   227,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    18,    45,    44,   nil,   nil,   227,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    18,    45,    44,
   nil,   nil,   227,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    18,    45,    48,    49,   nil,    32,    36,    38,    39,
    40,    41,   nil,    50,   nil,    53,   nil,    48,    49,   nil,
    32,    36,    38,    39,    40,    41,   nil,    50,   nil,    53,
   nil,    48,    49,   nil,    32,    36,    38,    39,    40,    41,
   nil,    50,    44,    53,   nil,   227,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    18,    45,    44,   nil,   nil,   227,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    18,    45,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    48,    49,   nil,    32,    36,    38,
    39,    40,    41,   nil,    50,   nil,    53,   nil,    48,    49,
   nil,    32,    36,    38,    39,    40,    41,   nil,    50,   nil,
    53 ]

racc_action_check = [
   226,    44,    75,   226,   188,   195,   132,    55,    57,    22,
    57,   195,   226,   226,    69,   186,    56,    69,   132,    55,
    56,    17,     0,    17,    56,     0,    69,    69,   187,    86,
   189,    56,   193,    56,    56,   188,    56,    56,   202,    44,
    75,    20,   226,   226,    22,   226,   226,   226,   226,   226,
   226,   214,   226,   216,   226,   217,    69,    69,   218,    69,
    69,    69,    69,    69,    69,   223,    69,   205,    69,   225,
   205,    86,    86,   228,    20,    20,    20,    21,    21,   205,
   205,   233,   183,   209,   243,   191,   209,   191,   191,    50,
    50,    92,    92,   244,   205,   209,   209,   183,   246,   183,
   183,   205,   183,   183,   183,   183,   247,   251,   253,   205,
   205,   254,   205,   205,   205,   205,   205,   205,   261,   205,
     1,   205,     5,   111,     7,   209,   209,     9,   209,   209,
   209,   209,   209,   209,    11,   209,   213,   209,   111,   213,
   111,   111,    12,   111,   111,    13,    16,    18,   213,   213,
    33,    36,    70,    38,    39,    70,    40,    41,    45,    46,
    53,    59,    63,   213,    70,    70,    64,    66,    76,    77,
   213,    78,    84,    87,    90,    96,    98,    99,   213,   213,
   100,   213,   213,   213,   213,   213,   213,   101,   213,   103,
   213,   104,   105,   106,    70,    70,   108,    70,    70,    70,
    70,    70,    70,   109,    70,    71,    70,   121,    71,   122,
   123,   124,   125,   126,   137,   138,   142,    71,    71,    72,
   143,   149,    72,   150,   154,   154,   152,   154,   154,   154,
   155,    72,    72,   154,   154,   154,   154,   154,   154,   156,
   180,   181,   184,   nil,   nil,   nil,   nil,    71,    71,   nil,
    71,    71,    71,    71,    71,    71,   nil,    71,   nil,    71,
   nil,    72,    72,   nil,    72,    72,    72,    72,    72,    72,
   nil,    72,   110,    72,   nil,   110,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   110,   110,   nil,   nil,   224,   nil,
   nil,   224,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   110,
   224,   224,   nil,   nil,   nil,   nil,   110,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   110,   110,   nil,   110,   110,   110,
   110,   110,   110,   nil,   110,   nil,   110,   nil,   nil,   nil,
   224,   224,   nil,   224,   224,   224,   224,   224,   224,   nil,
   224,    83,   224,   nil,    83,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    83,    83,   227,   nil,   nil,   227,   nil,
   nil,   nil,   nil,   227,   nil,   nil,   nil,   227,   227,   229,
   nil,   nil,   229,   nil,   nil,   nil,   nil,   229,   nil,   nil,
   nil,   229,   229,    83,    83,   nil,    83,    83,    83,    83,
    83,    83,   nil,    83,   nil,    83,   nil,   227,   227,   nil,
   227,   227,   227,   227,   227,   227,   nil,   227,   nil,   227,
   nil,   229,   229,   nil,   229,   229,   229,   229,   229,   229,
   nil,   229,    28,   229,   nil,    28,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    28,    28,    79,   nil,   nil,    79,
   nil,   nil,   nil,   nil,   nil,    79,   nil,   nil,    79,    79,
    80,   nil,   nil,    80,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    80,    80,    28,    28,   nil,    28,    28,    28,
    28,    28,    28,   nil,    28,   nil,    28,   nil,    79,    79,
   nil,    79,    79,    79,    79,    79,    79,   nil,    79,   nil,
    79,   nil,    80,    80,   nil,    80,    80,    80,    80,    80,
    80,   nil,    80,   250,    80,   nil,   250,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   250,   250,    81,   nil,   nil,
    81,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    81,
    81,    82,   nil,   nil,    82,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    82,    82,   250,   250,   nil,   250,   250,
   250,   250,   250,   250,   nil,   250,   nil,   250,   nil,    81,
    81,   nil,    81,    81,    81,    81,    81,    81,   nil,    81,
   nil,    81,   nil,    82,    82,   nil,    82,    82,    82,    82,
    82,    82,   nil,    82,   139,    82,   nil,   139,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   139,   139,   257,   nil,
   nil,   257,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   257,   257,     8,   nil,   nil,     8,   nil,   nil,   nil,   nil,
   nil,     8,   nil,   nil,     8,     8,   139,   139,   nil,   139,
   139,   139,   139,   139,   139,   nil,   139,   nil,   139,   nil,
   257,   257,   nil,   257,   257,   257,   257,   257,   257,   nil,
   257,   nil,   257,   nil,     8,     8,   nil,     8,     8,     8,
     8,     8,     8,   nil,     8,   151,     8,   nil,   151,   nil,
   nil,   nil,   nil,   151,   nil,   nil,   nil,   151,   151,   nil,
   nil,   nil,   158,   nil,   nil,   158,   nil,   nil,   nil,   nil,
   nil,   nil,   151,   nil,   158,   158,   nil,   nil,   nil,   151,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   151,   151,   nil,
   151,   151,   151,   151,   151,   151,   158,   151,   nil,   151,
   nil,   nil,   nil,   nil,   158,   158,   nil,   158,   158,   158,
   158,   158,   158,   nil,   158,   179,   158,   nil,   179,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   179,   179,    97,
   nil,   nil,    97,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    97,    97,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   179,   179,   nil,
   179,   179,   179,   179,   179,   179,   nil,   179,   nil,   179,
   nil,    97,    97,   nil,    97,    97,    97,    97,    97,    97,
   nil,    97,   185,    97,   nil,   185,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   185,   185,   nil,   nil,    65,   nil,
   nil,    65,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   185,
    65,    65,   nil,   nil,   nil,   nil,   185,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   185,   185,   nil,   185,   185,   185,
   185,   185,   185,   nil,   185,   nil,   185,   nil,   nil,   nil,
    65,    65,   nil,    65,    65,    65,    65,    65,    65,   nil,
    65,   190,    65,   nil,   190,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   190,   190,   nil,   nil,   192,   nil,   nil,
   192,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   190,   192,
   192,   nil,   nil,   nil,   nil,   190,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   190,   190,   nil,   190,   190,   190,   190,
   190,   190,   nil,   190,   nil,   190,   nil,   nil,   nil,   192,
   192,   nil,   192,   192,   192,   192,   192,   192,   nil,   192,
    23,   192,   nil,    23,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    23,    23,   194,   nil,   nil,   194,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   194,   194,   196,   nil,
   nil,   196,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   196,   196,    23,    23,   nil,    23,    23,    23,    23,    23,
    23,   nil,    23,   nil,    23,   nil,   194,   194,   nil,   194,
   194,   194,   194,   194,   194,   nil,   194,   nil,   194,   nil,
   196,   196,   nil,   196,   196,   196,   196,   196,   196,   nil,
   196,   197,   196,   nil,   197,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   197,   197,   198,   nil,   nil,   198,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   198,   198,   199,
   nil,   nil,   199,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   199,   199,   197,   197,   nil,   197,   197,   197,   197,
   197,   197,   nil,   197,   nil,   197,   nil,   198,   198,   nil,
   198,   198,   198,   198,   198,   198,   nil,   198,   nil,   198,
   nil,   199,   199,   nil,   199,   199,   199,   199,   199,   199,
   nil,   199,   200,   199,   nil,   200,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   200,   200,   201,   nil,   nil,   201,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   201,   201,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   200,   200,   nil,   200,   200,   200,
   200,   200,   200,   nil,   200,   nil,   200,   nil,   201,   201,
   nil,   201,   201,   201,   201,   201,   201,   nil,   201,   nil,
   201 ]

racc_action_pointer = [
    12,   120,   nil,   nil,   nil,   120,   nil,   113,   607,   127,
   nil,   131,   125,   129,   nil,   nil,   142,     6,   129,   nil,
    27,    30,    -5,   935,   nil,   nil,   nil,   nil,   417,   nil,
   nil,   nil,   nil,   132,   nil,   nil,   143,   nil,   145,   146,
   148,   149,   nil,   nil,   -17,   153,   103,   nil,   nil,   nil,
    32,   nil,   nil,   100,   nil,     2,    12,    -7,   nil,   143,
   nil,   nil,   nil,   134,   149,   813,   150,   nil,   nil,     9,
   147,   200,   214,   nil,   nil,   -16,   163,   160,   154,   431,
   445,   512,   526,   336,   167,   nil,    24,   116,   nil,   nil,
   170,   nil,    85,   nil,   nil,   nil,   163,   744,   168,   160,
   160,   167,   nil,   166,   168,   169,   176,   nil,   179,   174,
   267,   119,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   198,   200,   201,   202,   203,   204,   nil,   nil,   nil,
   nil,   nil,     1,   nil,   nil,   nil,   nil,   205,   211,   579,
   nil,   nil,   199,   203,   nil,   nil,   nil,   nil,   nil,   191,
   220,   660,   186,   nil,   192,   222,   205,   nil,   677,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   730,
   231,   237,   nil,    78,   211,   797,    -2,    19,    -5,    21,
   866,    52,   882,    24,   949,   -27,   963,  1016,  1030,  1044,
  1097,  1111,    25,   nil,   nil,    62,   nil,   nil,   nil,    78,
   nil,   nil,   nil,   131,    43,   nil,    48,    15,    54,   nil,
   nil,   nil,   nil,    31,   283,    61,    -5,   350,    39,   364,
   nil,   nil,   nil,    43,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    44,    76,   nil,    81,    72,   nil,   nil,
   498,    98,   nil,    99,   107,   nil,   nil,   593,   nil,   nil,
   nil,   101,   nil,   nil ]

racc_action_default = [
  -157,  -157,    -1,    -2,    -3,    -5,   -16,  -157,  -157,  -157,
    -4,  -157,  -157,   -24,   -25,   -26,   -28,   -31,  -151,  -109,
  -110,  -113,  -116,  -157,  -118,  -119,  -120,  -121,  -157,  -123,
  -124,  -125,  -127,  -157,  -129,  -130,  -157,  -132,  -157,  -157,
  -157,  -157,  -138,  -139,  -143,  -157,  -157,  -145,  -149,  -150,
  -157,  -154,  -155,  -157,   264,  -157,  -157,   -36,   -37,   -82,
   -40,   -41,   -23,   -57,  -157,  -157,  -157,   -30,  -151,  -157,
  -157,  -157,  -157,  -117,  -126,  -143,  -157,  -157,  -157,  -157,
  -157,  -157,  -157,  -157,  -141,  -142,  -157,  -157,  -153,  -156,
    -6,    -8,   -12,   -10,   -11,   -17,  -157,  -157,  -157,  -157,
  -157,  -157,   -45,   -47,   -49,   -50,  -157,   -35,  -157,   -59,
  -157,   -33,   -27,   -29,  -111,  -112,  -114,  -115,  -147,  -122,
  -128,  -157,  -157,  -157,  -157,  -157,  -157,  -140,  -144,  -146,
  -148,  -152,  -157,    -9,   -13,   -14,   -18,  -157,   -21,  -157,
   -42,   -82,  -157,  -157,   -46,   -48,   -51,   -34,   -38,   -64,
  -157,  -157,   -58,   -68,  -157,  -157,   -85,   -87,  -157,   -90,
   -91,   -92,   -94,   -95,   -96,   -97,   -98,   -99,  -106,  -107,
  -108,  -131,  -133,  -134,  -135,  -136,  -137,    -7,   -19,  -157,
  -157,   -76,   -43,  -157,   -66,  -157,  -157,  -157,  -157,  -108,
  -157,  -157,  -157,  -157,  -157,  -157,  -157,  -157,  -157,  -157,
  -157,  -157,  -157,   -39,   -81,  -157,   -89,   -20,   -22,  -157,
   -44,   -52,   -53,  -157,  -157,   -32,  -157,   -65,   -60,   -62,
   -63,   -15,   -93,   -86,  -157,  -157,  -157,  -157,  -157,  -157,
   -72,   -73,   -78,  -157,   -80,  -100,  -101,  -102,  -103,  -104,
  -105,   -88,   -75,   -54,  -157,   -67,  -157,  -157,   -71,   -77,
  -157,  -157,   -79,  -157,   -56,   -84,   -61,  -157,   -70,   -74,
   -55,  -157,   -69,   -83 ]

racc_goto_table = [
    67,    17,    56,   152,    57,   137,    91,   180,    76,   203,
   219,    15,    95,   230,   116,   117,    74,   114,   115,   212,
   220,    77,   253,   228,   254,   232,   218,   235,   236,   237,
   238,   239,   240,   223,   241,   206,    73,   128,    93,   129,
   107,   215,     2,     3,   188,   248,     4,   203,     5,   113,
    10,    90,   136,   133,   111,   247,    57,   249,    17,    96,
    13,   120,    74,    74,    74,    74,    62,    63,   112,   109,
   256,    76,   122,   123,   124,   125,   126,   242,   217,   203,
   220,   258,   149,   177,   184,     1,   204,   207,   262,   147,
   138,   140,   210,   211,   nil,   nil,   nil,   251,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   243,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    93,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   181,   183,   182,    57,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   189,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   138,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   181,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    77,   nil,   181,   nil,   nil,   nil,   nil,   255,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   263 ]

racc_goto_check = [
    11,    18,    14,    38,    29,    17,     8,    19,    63,    12,
    42,    22,    15,    48,    61,    61,    60,    59,    59,    37,
    43,    18,    39,    46,    40,    46,    41,    46,    46,    46,
    46,    46,    46,    52,    53,    54,    64,    75,    11,    76,
    11,    28,     2,     3,    38,    48,     4,    12,     5,    11,
     6,     7,    15,    10,    14,    46,    29,    46,    18,    16,
    20,    11,    60,    60,    60,    60,    21,    24,    22,    25,
    42,    63,    18,    18,    18,    18,    18,    19,    38,    12,
    43,    46,    26,     8,    27,     1,    31,    17,    46,    11,
    18,    29,    35,    36,   nil,   nil,   nil,    19,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    38,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    11,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    18,    14,    29,    29,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    18,   nil,    18,   nil,   nil,   nil,   nil,    11,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    11 ]

racc_goto_pointer = [
   nil,    85,    42,    43,    46,    48,    45,    -4,   -49,   nil,
   -39,   -17,  -146,   nil,   -10,   -44,     3,   -92,    -7,  -132,
    52,    53,     3,   nil,    54,     6,   -27,   -65,  -143,    -8,
   nil,   -69,   nil,   nil,   nil,   -91,   -90,  -164,  -107,  -222,
  -220,  -160,  -176,  -166,   nil,   nil,  -169,   nil,  -180,   nil,
   nil,   nil,  -157,  -171,  -123,   nil,   nil,   nil,   nil,   -52,
    -7,   -57,   nil,   -15,    13,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -49,   -47,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   187,   nil,   nil,   nil,    92,
   nil,    34,   153,     6,   nil,   nil,   nil,   nil,   170,   nil,
   nil,   nil,   nil,    16,   nil,   nil,   nil,   nil,   nil,    35,
    58,   231,    60,    61,   101,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    26,   169,   163,   154,   164,   nil,   165,
   166,   167,   156,   157,   159,   160,   161,   162,   168,    19,
    20,    21,    22,    23,    24,    25,    27,    29,    30,    31,
    33,    37,    42,    43,    46,   nil,    47,    51,    52 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 62, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  2, 64, :_reduce_4,
  0, 67, :_reduce_none,
  3, 67, :_reduce_6,
  3, 68, :_reduce_7,
  1, 68, :_reduce_none,
  2, 69, :_reduce_9,
  1, 70, :_reduce_none,
  1, 70, :_reduce_11,
  0, 71, :_reduce_12,
  1, 71, :_reduce_13,
  1, 71, :_reduce_14,
  3, 73, :_reduce_15,
  1, 66, :_reduce_none,
  4, 65, :_reduce_17,
  5, 65, :_reduce_18,
  3, 77, :_reduce_19,
  3, 78, :_reduce_20,
  1, 78, :_reduce_none,
  4, 76, :_reduce_22,
  3, 74, :_reduce_23,
  2, 74, :_reduce_24,
  1, 81, :_reduce_25,
  1, 81, :_reduce_26,
  3, 83, :_reduce_27,
  1, 83, :_reduce_none,
  3, 84, :_reduce_29,
  2, 84, :_reduce_30,
  1, 84, :_reduce_none,
  5, 82, :_reduce_32,
  2, 85, :_reduce_33,
  3, 75, :_reduce_34,
  2, 75, :_reduce_35,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  3, 75, :_reduce_38,
  1, 92, :_reduce_none,
  1, 91, :_reduce_none,
  1, 91, :_reduce_none,
  3, 93, :_reduce_42,
  4, 93, :_reduce_43,
  5, 94, :_reduce_44,
  1, 95, :_reduce_45,
  2, 95, :_reduce_46,
  1, 95, :_reduce_47,
  2, 95, :_reduce_48,
  1, 95, :_reduce_49,
  1, 95, :_reduce_50,
  2, 95, :_reduce_51,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  2, 97, :_reduce_54,
  4, 98, :_reduce_55,
  1, 100, :_reduce_none,
  0, 86, :_reduce_none,
  2, 86, :_reduce_58,
  0, 87, :_reduce_none,
  3, 87, :_reduce_60,
  3, 102, :_reduce_61,
  1, 102, :_reduce_none,
  1, 103, :_reduce_none,
  0, 88, :_reduce_none,
  2, 88, :_reduce_65,
  0, 89, :_reduce_none,
  2, 89, :_reduce_67,
  1, 105, :_reduce_none,
  6, 106, :_reduce_69,
  5, 106, :_reduce_70,
  4, 108, :_reduce_71,
  3, 108, :_reduce_72,
  1, 109, :_reduce_none,
  3, 109, :_reduce_74,
  3, 80, :_reduce_75,
  1, 80, :_reduce_none,
  4, 110, :_reduce_77,
  3, 110, :_reduce_78,
  4, 111, :_reduce_79,
  3, 111, :_reduce_80,
  2, 112, :_reduce_81,
  1, 90, :_reduce_82,
  3, 101, :_reduce_83,
  1, 101, :_reduce_none,
  1, 99, :_reduce_none,
  3, 99, :_reduce_86,
  1, 113, :_reduce_none,
  3, 113, :_reduce_88,
  2, 114, :_reduce_89,
  1, 114, :_reduce_none,
  1, 115, :_reduce_none,
  1, 116, :_reduce_none,
  3, 116, :_reduce_93,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  3, 118, :_reduce_100,
  3, 118, :_reduce_101,
  3, 118, :_reduce_102,
  3, 118, :_reduce_103,
  3, 118, :_reduce_104,
  3, 118, :_reduce_105,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 119, :_reduce_none,
  1, 79, :_reduce_none,
  1, 79, :_reduce_none,
  3, 120, :_reduce_111,
  3, 120, :_reduce_112,
  1, 120, :_reduce_none,
  3, 122, :_reduce_114,
  3, 122, :_reduce_115,
  1, 122, :_reduce_none,
  2, 123, :_reduce_117,
  1, 123, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  1, 125, :_reduce_none,
  3, 125, :_reduce_122,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 129, :_reduce_127,
  3, 104, :_reduce_128,
  1, 104, :_reduce_none,
  1, 131, :_reduce_none,
  4, 127, :_reduce_131,
  1, 127, :_reduce_none,
  4, 132, :_reduce_133,
  4, 132, :_reduce_134,
  4, 132, :_reduce_135,
  4, 132, :_reduce_136,
  4, 132, :_reduce_137,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  3, 133, :_reduce_140,
  2, 133, :_reduce_141,
  2, 133, :_reduce_142,
  1, 133, :_reduce_143,
  3, 134, :_reduce_144,
  1, 135, :_reduce_none,
  1, 136, :_reduce_none,
  2, 137, :_reduce_147,
  1, 137, :_reduce_148,
  1, 124, :_reduce_149,
  1, 124, :_reduce_150,
  1, 72, :_reduce_151,
  3, 121, :_reduce_152,
  2, 121, :_reduce_153,
  1, 121, :_reduce_none,
  1, 138, :_reduce_none,
  2, 139, :_reduce_156 ]

racc_reduce_n = 157

racc_shift_n = 264

racc_token_table = {
  false => 0,
  :error => 1,
  :ORDER => 2,
  :BY => 3,
  :comma => 4,
  :unsigned_integer => 5,
  :ASC => 6,
  :DESC => 7,
  :left_paren => 8,
  :right_paren => 9,
  :INSERT => 10,
  :INTO => 11,
  :VALUES => 12,
  :SELECT => 13,
  :asterisk => 14,
  :AS => 15,
  :FROM => 16,
  :identifier => 17,
  :period => 18,
  :CROSS => 19,
  :JOIN => 20,
  :INNER => 21,
  :LEFT => 22,
  :OUTER => 23,
  :RIGHT => 24,
  :FULL => 25,
  :ON => 26,
  :USING => 27,
  :WHERE => 28,
  :GROUP => 29,
  :HAVING => 30,
  :LIMIT => 31,
  :NOT => 32,
  :BETWEEN => 33,
  :AND => 34,
  :IN => 35,
  :LIKE => 36,
  :IS => 37,
  :NULL => 38,
  :EXISTS => 39,
  :OR => 40,
  :equals_operator => 41,
  :not_equals_operator => 42,
  :less_than_operator => 43,
  :greater_than_operator => 44,
  :less_than_or_equals_operator => 45,
  :greater_than_or_equals_operator => 46,
  :plus_sign => 47,
  :minus_sign => 48,
  :solidus => 49,
  :CURRENT_USER => 50,
  :COUNT => 51,
  :AVG => 52,
  :MAX => 53,
  :MIN => 54,
  :SUM => 55,
  :E => 56,
  :quote => 57,
  :character_string_literal => 58,
  :DATE => 59,
  :date_string => 60 }

racc_nt_base = 61

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ORDER",
  "BY",
  "comma",
  "unsigned_integer",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "asterisk",
  "AS",
  "FROM",
  "identifier",
  "period",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "LIMIT",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_name",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "limit_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "numeric_value_expression",
  "general_literal",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "qualifier",
  "general_set_function",
  "exact_numeric_literal",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 21)
  def _reduce_7(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'parser.racc', 25)
  def _reduce_9(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.racc', 29)
  def _reduce_11(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_12(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_13(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_14(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_18(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 52)
  def _reduce_20(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_27(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 28 omitted

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_30(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 31 omitted

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 36 omitted

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_38(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_42(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_43(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 100)
  def _reduce_44(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 103)
  def _reduce_45(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_46(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_49(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_50(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_51(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 52 omitted

# reduce 53 omitted

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 56 omitted

# reduce 57 omitted

module_eval(<<'.,.,', 'parser.racc', 126)
  def _reduce_58(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 59 omitted

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_61(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

module_eval(<<'.,.,', 'parser.racc', 141)
  def _reduce_65(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 66 omitted

module_eval(<<'.,.,', 'parser.racc', 145)
  def _reduce_67(val, _values, result)
     result = SQLParser::Statement::LimitClause.new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

# reduce 68 omitted

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_69(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 153)
  def _reduce_70(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 156)
  def _reduce_71(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_72(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 73 omitted

module_eval(<<'.,.,', 'parser.racc', 161)
  def _reduce_74(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 164)
  def _reduce_75(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 76 omitted

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_77(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 175)
  def _reduce_79(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 179)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 183)
  def _reduce_82(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_83(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 84 omitted

# reduce 85 omitted

module_eval(<<'.,.,', 'parser.racc', 192)
  def _reduce_86(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 87 omitted

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_88(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 199)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

module_eval(<<'.,.,', 'parser.racc', 207)
  def _reduce_93(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_100(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 219)
  def _reduce_101(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 220)
  def _reduce_102(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_103(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 222)
  def _reduce_104(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 223)
  def _reduce_105(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_111(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 238)
  def _reduce_112(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 113 omitted

module_eval(<<'.,.,', 'parser.racc', 242)
  def _reduce_114(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 243)
  def _reduce_115(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 116 omitted

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_117(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

module_eval(<<'.,.,', 'parser.racc', 254)
  def _reduce_122(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

module_eval(<<'.,.,', 'parser.racc', 265)
  def _reduce_127(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_128(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 129 omitted

# reduce 130 omitted

module_eval(<<'.,.,', 'parser.racc', 275)
  def _reduce_131(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 132 omitted

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_133(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_134(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_135(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_136(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

# reduce 138 omitted

# reduce 139 omitted

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_142(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 294)
  def _reduce_143(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_144(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 145 omitted

# reduce 146 omitted

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_147(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_149(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_150(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_152(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 320)
  def _reduce_153(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 154 omitted

# reduce 155 omitted

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_156(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
