class SQLParser::Parser

rule

  query_specification
    : select_clause from_clause using_scope_clause where_clause group_by_clause having_clause order_by_clause limit_clause { result = SQLParser::Statement::Query.new(val[0], val[1], val[2], val[3], val[4], val[5], val[6], val[7]) }

  select_clause
    : SELECT select_list { result = SQLParser::Statement::Select.new(val[1]) }

# queries
  subquery
    # FIXME: shortcut
    : left_paren query_expression right_paren { result = SQLParser::Statement::Subquery.new(val[1]) }

  query_expression
    : query_specification

  select_list
    : select_sublist { result = SQLParser::Statement::SelectList.new(val[0]) }

  select_sublist
    : derived_column comma select_sublist { result = Array(val[0]) + Array(val[2]) }
    | derived_column

  # TODO: Only fields, aggregate functions and subqueries in SELECT
  derived_column
    : value_expression column_name { result = SQLParser::Statement::As.new(val[0], val[1]) }
    | value_expression

  from_clause
    : FROM table_reference { result = SQLParser::Statement::FromClause.new(val[1]) }

  table_reference
    : table_name AS column_name { result = SQLParser::Statement::As.new(val[0], val[2]) }
    | table_name column_name { result = SQLParser::Statement::As.new(val[0], val[1]) }
    | table_name
    | identifier period identifier { result = SQLParser::Statement::Table.new(val[0], val[2]) }

  table_subquery
    : subquery

  using_scope_clause
    : # no action
    | USING SCOPE identifier { result = SQLParser::Statement::UsingScope.new(val[2]) }

  where_clause
    : # no action
    | WHERE search_condition { result = SQLParser::Statement::WhereClause.new(val[1]) }

  group_by_clause
    : # no action
    | GROUP BY grouping_column_reference_list { result = SQLParser::Statement::GroupByClause.new(val[2]) }

  grouping_column_reference_list
    : grouping_column_reference_list comma grouping_column_reference { result = Array(val[0]) + Array(val[2]) }
    | grouping_column_reference

  grouping_column_reference
    : column_reference

  having_clause
    : # no action
    | HAVING search_condition { result = SQLParser::Statement::HavingClause.new(val[1]) }

  order_by_clause
    : # no action
    | ORDER BY sort_specification_list { result = SQLParser::Statement::OrderBy.new(val[2]) }

  limit_clause
    : # no action
    | LIMIT unsigned_integer { result = SQLParser::Statement::LimitClause.new(SQLParser::Statement::Integer.new(val[1])) }

# query expression components
  row_subquery
    : subquery

  between_predicate
    : row_value_constructor NOT BETWEEN row_value_constructor AND row_value_constructor { result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) }
    | row_value_constructor BETWEEN row_value_constructor AND row_value_constructor { result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) }

  in_predicate
    : row_value_constructor NOT IN in_predicate_value { result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) }
    | row_value_constructor IN in_predicate_value { result = SQLParser::Statement::In.new(val[0], val[2]) }

  in_predicate_value
    : table_subquery
    | left_paren in_value_list right_paren { result = SQLParser::Statement::InValueList.new(val[1]) }

  in_value_list
    : value_expression comma in_value_list { result = Array(val[0]) + Array(val[2]) }
    | value_expression

  like_predicate
    # FIXME: the SQL-92 grammar indicates these should be
    # character_value_expression nodes, but changing them causes reduce/reduce
    # conflicts.
    : row_value_constructor NOT LIKE row_value_constructor { result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) }
    | row_value_constructor LIKE row_value_constructor { result = SQLParser::Statement::Like.new(val[0], val[2]) }

  null_predicate
    : row_value_constructor IS NOT NULL { result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) }
    | row_value_constructor IS NULL { result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) }

  exists_predicate
    : EXISTS table_subquery { result = SQLParser::Statement::Exists.new(val[1]) }

# constraints
  table_name
    : identifier { result = SQLParser::Statement::Table.new(val[0]) }

# search condition
  search_condition
    : boolean_term
    | search_condition OR boolean_term { result = SQLParser::Statement::Or.new(val[0], val[2]) }

  boolean_term
    : boolean_factor
    | boolean_term AND boolean_factor { result = SQLParser::Statement::And.new(val[0], val[2]) }

  boolean_factor:
    : NOT boolean_test { result = SQLParser::Statement::Not.new(val[1]) }
    | boolean_test

  boolean_test
    : boolean_primary

  boolean_primary
    : predicate
    | left_paren search_condition right_paren { result = val[1] }

  predicate
    : comparison_predicate
    | between_predicate
    | in_predicate
    | like_predicate
    | null_predicate
    | exists_predicate

  comparison_predicate
    : row_value_constructor equals_operator row_value_constructor { result = SQLParser::Statement::Equals.new(val[0], val[2]) }
    | row_value_constructor not_equals_operator row_value_constructor { result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) }
    | row_value_constructor less_than_operator row_value_constructor { result = SQLParser::Statement::Less.new(val[0], val[2]) }
    | row_value_constructor greater_than_operator row_value_constructor { result = SQLParser::Statement::Greater.new(val[0], val[2]) }
    | row_value_constructor less_than_or_equals_operator row_value_constructor { result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) }
    | row_value_constructor greater_than_or_equals_operator row_value_constructor { result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) }

  row_value_constructor
    : row_value_constructor_element
    | row_subquery

  row_value_constructor_element
    : value_expression

  value_expression
    : numeric_value_expression
    | general_literal

  numeric_value_expression
    : term plus_sign numeric_value_expression { result = SQLParser::Statement::Add.new(val[0], val[2]) }
    | term minus_sign numeric_value_expression { result = SQLParser::Statement::Subtract.new(val[0], val[2]) }
    | term

  term
    : factor asterisk term { result = SQLParser::Statement::Multiply.new(val[0], val[2]) }
    | factor solidus term { result = SQLParser::Statement::Divide.new(val[0], val[2]) }
    | factor

  factor
    : sign value_expression_primary { result = val[0].new(val[1]) }
    | value_expression_primary

  value_expression_primary
    : unsigned_value_specification
    | column_reference
    | general_set_function
    | left_paren value_expression right_paren { result = val[1] }

  unsigned_value_specification
    : unsigned_literal

  unsigned_literal
    : unsigned_numeric_literal
    | general_literal

  column_reference
    : qualifier period column_name { result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) }
    | column_name

  qualifier
    : table_name

  general_set_function
    : COUNT left_paren value_expression right_paren { result = SQLParser::Statement::Count.new(val[2]) }
    | COUNT left_paren right_paren { result = SQLParser::Statement::Count.new(nil) }
    | AVG left_paren value_expression right_paren { result = SQLParser::Statement::Average.new(val[2]) }
    | MAX left_paren value_expression right_paren { result = SQLParser::Statement::Maximum.new(val[2]) }
    | MIN left_paren value_expression right_paren { result = SQLParser::Statement::Minimum.new(val[2]) }
    | SUM left_paren value_expression right_paren { result = SQLParser::Statement::Sum.new(val[2]) }
    | func_name left_paren func_arg_list right_paren { result = SQLParser::Statement::Function.new(val[0], val[2]) }

  func_name
    : identifier

  func_arg_list
    : func_args_list comma func_arg_expr
    | func_arg_expr

  func_arg_expr
    : value_expression

# ordering
  sort_specification_list
    : sort_specification_list comma sort_specification { result = Array(val[0]) + Array(val[2]) }
    | sort_specification

  sort_specification
    : sort_key ordering_specification nulls_ordering_specification { result = SQLParser::Statement::OrderColumn.new(val[0], val[1], val[2]) }

  sort_key
    : column_name
    | unsigned_integer { result = SQLParser::Statement::Integer.new(val[0]) }

  ordering_specification
    : # no action
    | ASC { result = SQLParser::Statement::Ascending.new }
    | DESC { result = SQLParser::Statement::Descending.new }

  nulls_ordering_specification
    : # no action
    | NULLS FIRST { result = SQLParser::Statement::NullsFirst.new }
    | NULLS LAST { result = SQLParser::Statement::NullsLast.new }

# literal numbers, strings, dates and times
  unsigned_numeric_literal
    : exact_numeric_literal
    | approximate_numeric_literal

  exact_numeric_literal
    : unsigned_integer period unsigned_integer { result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) }
    | unsigned_integer period { result = SQLParser::Statement::Float.new(val[0]) }
    | period unsigned_integer { result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) }
    | unsigned_integer { result = SQLParser::Statement::Integer.new(val[0]) }

  approximate_numeric_literal
    : mantissa E exponent { result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) }

  mantissa
    : signed_integer

  exponent
    : signed_integer

  signed_integer
    : sign unsigned_integer { result = val[0].new(SQLParser::Statement::Integer.new(val[1])) }
    | unsigned_integer { result = SQLParser::Statement::Integer.new(val[0]) }

  sign
    : plus_sign { result = SQLParser::Statement::UnaryPlus }
    | minus_sign { result = SQLParser::Statement::UnaryMinus }

# sql module
  column_name
    : identifier { result = SQLParser::Statement::Column.new(val[0]) }

# literals
  general_literal
    : quote character_string_literal quote { result = SQLParser::Statement::String.new(val[1]) }
    | quote quote { result = SQLParser::Statement::String.new('') }
    | datetime_literal

  datetime_literal
    : date_literal

  date_literal
    : DATE date_string { result = SQLParser::Statement::Date.new(val[1]) }

---- header ----
require File.dirname(__FILE__) + '/parser.rex.rb'

---- inner ----

def self.parse(sql)
  new.scan_str(sql)
end
